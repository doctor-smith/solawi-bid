<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>EmptyFunctionBlock:parser.kt$ParserTest${ }</ID>
    <ID>FunctionNaming:language-reader.kt$fun Texts(path: String): Reader&lt;Lang.Block, Lang.Block&gt;</ID>
    <ID>FunctionNaming:serializers.kt$fun &lt;T : Any&gt; Serializer(t: T): KSerializer&lt;T&gt;</ID>
    <ID>NestedBlockDepth:language.kt$@I18N fun Block.component(path: String): Block</ID>
    <ID>NestedBlockDepth:language.kt$@I18N operator fun Lang.get(path: String): String</ID>
    <ID>ReturnCount:is-double.kt$fun String.isDouble(precision: Int = 2, dotHit: Boolean = false): Boolean</ID>
    <ID>TooGenericExceptionThrown:language-merge.kt$throw Exception("Cannot merge blocks")</ID>
    <ID>TooGenericExceptionThrown:language-merge.kt$throw Exception("Cannot merge langs")</ID>
    <ID>TooGenericExceptionThrown:language.kt$throw Exception("There is no Element in block '${this@get.key}' with key = '$result'")</ID>
    <ID>TooGenericExceptionThrown:language.kt$throw Exception("There is no block in block '${this@component.key}' with key = '$result'")</ID>
    <ID>TooGenericExceptionThrown:round-state.kt$RoundState.Companion$throw Exception("No such RoundState")</ID>
    <ID>TooManyFunctions:api.kt$Api : Map</ID>
    <ID>UnusedPrivateProperty:language-test.kt$LanguageTest$val r = lang.merge(l)</ID>
    <ID>UnusedPrivateProperty:parser.kt$ParserTest$val TillLeftOrRight = CollectWhile { it != left &amp;&amp; it != right}</ID>
    <ID>UnusedPrivateProperty:parser.kt$ParserTest$val c1 = "{ how {do {you{ feel } }} }---{}"</ID>
    <ID>UnusedPrivateProperty:storage.kt$StorageTest$val unit: Unit = dispatcher dispatch newName</ID>
    <ID>UtilityClassWithPublicConstructor:storage.kt$Read</ID>
    <ID>VariableNaming:parser.kt$ParserTest$val IsLeft = When{it == left}</ID>
    <ID>VariableNaming:parser.kt$ParserTest$val Left = White dL (FirstMatches(left) map {"$it"}) dR White</ID>
    <ID>VariableNaming:parser.kt$ParserTest$val Right = White dL FirstMatches(right) map {"$it"} dR White</ID>
    <ID>VariableNaming:parser.kt$ParserTest$val TillLeft = CollectWhile { it != left }</ID>
    <ID>VariableNaming:parser.kt$ParserTest$val TillLeftOrRight = CollectWhile { it != left &amp;&amp; it != right}</ID>
    <ID>VariableNaming:parser.kt$ParserTest$val TillRight = CollectWhile { it != right }</ID>
    <ID>VariableNaming:parser.kt$ParserTest$val White = DropAllWhitespace()</ID>
    <ID>VariableNaming:storage.kt$StorageTest$val X = Read from storage</ID>
  </CurrentIssues>
</SmellBaseline>
