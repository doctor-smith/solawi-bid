// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.evoleq.device.data

import org.evoleq.compose.style.data.device.DeviceType
import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Device(
    @ReadWrite val screenWidth: Double = 0.0,
    @ReadWrite val pixelRation: Double = 1.0,
    @ReadWrite val isTouchDevice: Boolean = false,
    @ReadWrite val userAgent: String = "",
    @ReadWrite val mediaType: DeviceType = DeviceType.Empty
)

/**
 * Autogenerated Lens.
 * Read and manipulate [Device.screenWidth]
 */
@ReadWrite val screenWidth: Lens<Device, Double> by lazy{ Lens(
    get = {whole -> whole.screenWidth},
    set = {part -> {whole -> whole.copy(screenWidth = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Device.screenWidth]
 */
@ReadWrite fun Device.screenWidth(set: Double.()->Double ): Device = copy(screenWidth = set(screenWidth)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Device.pixelRation]
 */
@ReadWrite val pixelRation: Lens<Device, Double> by lazy{ Lens(
    get = {whole -> whole.pixelRation},
    set = {part -> {whole -> whole.copy(pixelRation = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Device.pixelRation]
 */
@ReadWrite fun Device.pixelRation(set: Double.()->Double ): Device = copy(pixelRation = set(pixelRation)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Device.isTouchDevice]
 */
@ReadWrite val isTouchDevice: Lens<Device, Boolean> by lazy{ Lens(
    get = {whole -> whole.isTouchDevice},
    set = {part -> {whole -> whole.copy(isTouchDevice = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Device.isTouchDevice]
 */
@ReadWrite fun Device.isTouchDevice(set: Boolean.()->Boolean ): Device = copy(isTouchDevice = set(isTouchDevice)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Device.userAgent]
 */
@ReadWrite val userAgent: Lens<Device, String> by lazy{ Lens(
    get = {whole -> whole.userAgent},
    set = {part -> {whole -> whole.copy(userAgent = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Device.userAgent]
 */
@ReadWrite fun Device.userAgent(set: String.()->String ): Device = copy(userAgent = set(userAgent)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Device.mediaType]
 */
@ReadWrite val mediaType: Lens<Device, DeviceType> by lazy{ Lens(
    get = {whole -> whole.mediaType},
    set = {part -> {whole -> whole.copy(mediaType = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Device.mediaType]
 */
@ReadWrite fun Device.mediaType(set: DeviceType.()->DeviceType ): Device = copy(mediaType = set(mediaType)) 
