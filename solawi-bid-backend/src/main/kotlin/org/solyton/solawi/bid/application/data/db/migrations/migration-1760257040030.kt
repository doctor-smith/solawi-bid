package org.solyton.solawi.bid.application.data.db.migrations

import org.evoleq.exposedx.migrations.Migration
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.and
import org.solyton.solawi.bid.module.application.repository.createUserRoleContext
import org.solyton.solawi.bid.module.application.schema.UserApplicationEntity
import org.solyton.solawi.bid.module.application.schema.UserModuleEntity
import org.solyton.solawi.bid.module.permission.schema.RoleEntity
import org.solyton.solawi.bid.module.permission.schema.RolesTable
import org.solyton.solawi.bid.module.permission.schema.UserRoleContext

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Sun Oct 12 10:17:20 CEST 2025
 *
 * Description: Add Missing [UserRoleContext]s
 * for owners of apps and modules
 */
class Migration1760257040030(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1760257040030

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {

        val ownerRole = RoleEntity.find { RolesTable.name eq "OWNER" }.first()

        UserApplicationEntity.all().toList().forEach { userApplication ->
            val entryDoesNotExist = UserRoleContext.select(UserRoleContext.id).where{
                UserRoleContext.userId eq userApplication.userId and
                (UserRoleContext.contextId eq userApplication.context.id) and
                (UserRoleContext.roleId eq ownerRole.id)
            }.empty()
            if(entryDoesNotExist) createUserRoleContext(
                userApplication.userId,
                ownerRole.name,
                userApplication.context.id.value
            )
        }

        UserModuleEntity.all().toList().forEach { userModule ->
            val entryDoesNotExist = UserRoleContext.select(UserRoleContext.id).where{
                UserRoleContext.userId eq userModule.userId and
                (UserRoleContext.contextId eq userModule.context.id) and
                (UserRoleContext.roleId eq ownerRole.id)
            }.empty()
            if(entryDoesNotExist) createUserRoleContext(
                userModule.userId,
                ownerRole.name,
                userModule.context.id.value
            )
        }
    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
