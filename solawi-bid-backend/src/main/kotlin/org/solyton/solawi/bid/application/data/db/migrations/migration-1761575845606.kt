package org.solyton.solawi.bid.application.data.db.migrations

import org.evoleq.exposedx.migrations.Migration
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.Transaction
import org.solyton.solawi.bid.module.bid.schema.AuctionEntity
import org.solyton.solawi.bid.module.bid.service.addUserAsOwnerToContext
import org.solyton.solawi.bid.module.bid.service.cloneDefaultAuctionContext
import org.solyton.solawi.bid.module.bid.service.getAuctionUserApplication
import org.solyton.solawi.bid.module.permission.schema.ContextEntity
import org.solyton.solawi.bid.module.permission.schema.ContextsTable
import org.solyton.solawi.bid.module.permission.schema.repository.createChild
import org.solyton.solawi.bid.module.user.schema.UserEntity
import org.solyton.solawi.bid.module.user.schema.UsersTable

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Mon Oct 27 15:37:25 CET 2025
 *
 * Description: Add a context to each existing auction
 */
class Migration1761575845606(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1761575845606

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        val user = UserEntity.find{ UsersTable.username eq "owner@solyton.org" }.first()
        val auctionApplication = getAuctionUserApplication(user.id.value)
        val auctionApplicationContext = auctionApplication.context.createChild("AUCTION.${user.id.value}")
        cloneDefaultAuctionContext(user.id.value, auctionApplicationContext.id.value)
        addUserAsOwnerToContext(user.id.value, auctionApplicationContext.id.value)

        AuctionEntity.all().forEach { auction -> auction.context = auctionApplicationContext }
    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
