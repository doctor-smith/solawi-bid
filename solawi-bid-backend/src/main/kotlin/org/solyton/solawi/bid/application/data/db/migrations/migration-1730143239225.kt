package org.solyton.solawi.bid.application.data.db.migrations

import org.evoleq.exposedx.migrations.Migration
import org.evoleq.uuid.UUID_ZERO
import org.jetbrains.exposed.sql.*
import org.solyton.solawi.bid.application.permission.Right
import org.solyton.solawi.bid.application.permission.Role
import org.solyton.solawi.bid.module.application.permission.ApplicationContext
import org.solyton.solawi.bid.module.application.permission.Context
import org.solyton.solawi.bid.module.bid.permission.AuctionContext
import org.solyton.solawi.bid.module.permission.schema.*
import org.solyton.solawi.bid.module.user.permission.OrganizationContext
import org.solyton.solawi.bid.module.user.permission.OrganizationRight

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Mon Oct 28 20:20:39 CET 2024
 *
 * Description:
 * - Add tables:
 *   - Contexts,
 *   - Rights,
 *   - Roles,
 *   - RoleRightContexts,
 *   - UserRoleContext
 * - Setup basic rights, roles and contexts
 * - Setup Application User
 */
class Migration1730143239225(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1730143239225

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        SchemaUtils.create(Contexts, Rights, Roles, RoleRightContexts, UserRoleContext)
        setupBasicRolesAndRights()

    }

    /**
     * Downwards migration (inverse to the upward migration).
     * These migrations are not taken into account by now!
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}

fun setupBasicRolesAndRights() {
    // Contexts
    val applicationContextId = Contexts.insertAndGetId {
        it[name] = Context.Application.value
        it[createdBy] = UUID_ZERO
    }
    // val applicationOrganizationContextId =
    Contexts.insertAndGetId {
        it[name] = ApplicationContext.Organization.value
        it[createdBy] = UUID_ZERO
    }
    Contexts.insert {
        it[name] = OrganizationContext.value
        it[createdBy] = UUID_ZERO
    }
    Contexts.insert {
        it[name] = OrganizationContext.Management.value
        it[createdBy] = UUID_ZERO
    }
    Contexts.insert {
        it[name] = Context.Auction.value
        it[createdBy] = UUID_ZERO
    }
    Contexts.insert {
        it[name] = AuctionContext.Management.value
        it[createdBy] = UUID_ZERO
    }

    // Roles
    val ownerRoleId = Roles.insertAndGetId {
        it[name] = Role.owner.value
        it[description] = Role.owner.description
    }
    // val managerRoleId =
    Roles.insertAndGetId {
        it[name] = Role.manager.value
        it[description] = Role.manager.description
    }

    val userRoleId = Roles.insertAndGetId {
        it[name] = Role.user.value
        it[description] = Role.user.description
    }

    // val bidderRoleId =
    Roles.insertAndGetId {
        it[name] = Role.bidder.value
        it[description] = Role.bidder.description
    }

    // General Rights
    val createId = Rights.insertAndGetId {
        it[name] = Right.create.value
        it[description] = Right.create.description
    }
    Rights.insert {
        it[name] = Right.read.value
        it[description] = Right.read.description
    }
    Rights.insert {
        it[name] = Right.update.value
        it[description] = Right.update.description
    }
    Rights.insert {
        it[name] = Right.delete.value
        it[description] = Right.delete.description
    }

    val createOrganizationId = Rights.insertAndGetId {
        it[name] = OrganizationRight.Organization.create.value
        it[description] = OrganizationRight.Organization.create.description
    }
    // val readOrganizationId =
    Rights.insertAndGetId {
        it[name] = OrganizationRight.Organization.read.value
        it[Roles.description] = OrganizationRight.Organization.read.description
    }
    // val updateOrganizationId =
    Rights.insertAndGetId {
        it[name] = OrganizationRight.Organization.update.value
        it[Roles.description] = OrganizationRight.Organization.update.description
    }
    // val deleteOrganizationId =
    Rights.insertAndGetId {
        it[name] = OrganizationRight.Organization.delete.value
        it[Roles.description] = OrganizationRight.Organization.delete.description
    }

    RoleRightContexts.insert {
        it[contextId] = applicationContextId
        it[roleId] = ownerRoleId
        it[rightId] = createId
    }
    // OwnerRole in context Application
    RoleRightContexts.insert {
        it[contextId] = applicationContextId
        it[roleId] = ownerRoleId
        it[rightId] = createOrganizationId
    }

    // UserRole in context Application
    RoleRightContexts.insert {
        it[contextId] = applicationContextId
        it[roleId] = userRoleId
        it[rightId] = createOrganizationId
    }
}
