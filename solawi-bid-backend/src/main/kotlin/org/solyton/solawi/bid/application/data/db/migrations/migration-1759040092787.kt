package org.solyton.solawi.bid.application.data.db.migrations

import org.evoleq.exposedx.migrations.Migration
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.and
import org.jetbrains.exposed.sql.selectAll
import org.solyton.solawi.bid.module.application.schema.ApplicationContextsTable
import org.solyton.solawi.bid.module.application.schema.ApplicationEntity
import org.solyton.solawi.bid.module.application.schema.ApplicationsTable
import org.solyton.solawi.bid.module.application.schema.ModuleContextsTable
import org.solyton.solawi.bid.module.application.schema.ModuleEntity
import org.solyton.solawi.bid.module.application.schema.ModulesTable
import org.solyton.solawi.bid.module.application.schema.UserApplicationEntity
import org.solyton.solawi.bid.module.application.schema.UserApplicationsTable
import org.solyton.solawi.bid.module.application.schema.UserModuleEntity
import org.solyton.solawi.bid.module.application.schema.UserModulesTable
import org.solyton.solawi.bid.module.permission.schema.ContextEntity
import org.solyton.solawi.bid.module.permission.schema.ContextsTable
import org.solyton.solawi.bid.module.permission.schema.repository.cloneRightRoleContext
import org.solyton.solawi.bid.module.permission.schema.repository.createChild
import org.solyton.solawi.bid.module.permission.schema.repository.createRootContext

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Sun Sep 28 08:14:52 CEST 2025
 *
 * Description:
 * 1. Ensure that all apps and modules are related to contexts.
 *    At the moment, all apps are related to contexts, all modules of application
 *    "Application Management" are related to contexts.
 *    It remains to relate the modules the Auctions application.
 *    Relate these contexts as defaultContexts in the modules
 * 2. Migrate existing application and module contexts:
 *    application_contexts.context_id -> applications[applciation_id].default_context_id
 * 3. Rollback?
 * 4. Add empty context?
 */
class Migration1759040092787(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1759040092787

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        // Add empty context if not present
        ContextEntity.find { ContextsTable.rootId eq null and (ContextsTable.name eq "EMPTY") }.firstOrNull()
            ?:createRootContext("EMPTY")

        // Hande AUCTIONS
        // collect data
        val auctionsApplication = ApplicationEntity.find { ApplicationsTable.name eq "AUCTIONS" }.first()

        val auctionsApplicationContextId = ApplicationContextsTable.selectAll().where{
            ApplicationContextsTable.applicationId eq auctionsApplication.id
        }.map { it[ApplicationContextsTable.contextId] }.first()

        val auctionApplicationContext = ContextEntity.find{ ContextsTable.id eq auctionsApplicationContextId }.first()

        val auctionNodules = ModuleEntity.find { ModulesTable.applicationId eq auctionsApplication.id }.toList()

        val userAuctionApplicationModules = UserModuleEntity.find { UserModulesTable.moduleId inList auctionNodules.map{it.id} }.toList()

        val userAuctionApplicationApps = UserApplicationEntity.find { UserApplicationsTable.applicationId eq auctionsApplication.id }.toList()

        // Migrate
        auctionsApplication.defaultContext = auctionApplicationContext

        auctionNodules.forEach{ module ->
            val context = auctionApplicationContext.createChild(module.name)
            module.defaultContext = context
        }

        userAuctionApplicationApps.forEach { userApplication ->
            userApplication.context = createRootContext(userApplication.application.name + "." + userApplication.application.id+ "." + userApplication.userId)
            cloneRightRoleContext(
                userApplication.application.defaultContext.id.value,
                userApplication.context.id.value
            )
        }

        userAuctionApplicationModules.forEach { userModule ->
            val application = userModule.module.application
            val userApplication = UserApplicationEntity.find {
                UserApplicationsTable.applicationId eq application.id and
                (UserApplicationsTable.userId eq  userModule.userId)
            }.first()

            userModule.context = userApplication.context.createChild(userModule.module.name)
            cloneRightRoleContext(
                userModule.module.defaultContext.id.value,
                userModule.context.id.value
            )
        }

        // 2. APPLICATION_MANAGEMENT
        val applicationManagementApplication = ApplicationEntity.find {
            ApplicationsTable.name eq "APPLICATION_MANAGEMENT"
        }.first()
        val applicationManagementContextId = ApplicationContextsTable.selectAll().where{
            ApplicationContextsTable.applicationId eq applicationManagementApplication.id
        }.map { it[ApplicationContextsTable.contextId] }.first()

        val applicationManagementContext = ContextEntity.find{ ContextsTable.id eq applicationManagementContextId }.first()

        val applicationManagementNodules = ModuleEntity.find { ModulesTable.applicationId eq applicationManagementApplication.id }.toList()

        val applicationManagementNoduleIds =applicationManagementNodules.map{ it.id }
        val applicationManagementNoduleContexts = ModuleContextsTable.selectAll().where{
            ModuleContextsTable.moduleId inList applicationManagementNoduleIds
        }.map{ Pair(it[ModuleContextsTable.moduleId], it[ModuleContextsTable.contextId]) }

        val userApplicationManagementApplicationModules = UserModuleEntity.find { UserModulesTable.moduleId inList applicationManagementNoduleIds }.toList()

        val userApplicationManagementApplicationApps = UserApplicationEntity.find { UserApplicationsTable.applicationId eq applicationManagementApplication.id }.toList()

        // Migrate
        applicationManagementApplication.defaultContext = applicationManagementContext
        applicationManagementNodules.forEach { module ->
            val contextId = applicationManagementNoduleContexts.first { pair -> pair.first == module.id }.second
            val context = ContextEntity.find { ContextsTable.id eq contextId }.first()

            module.defaultContext = context
        }

        userApplicationManagementApplicationApps.forEach { userApplication ->
            userApplication.context = createRootContext(userApplication.application.name + "." + userApplication.application.id+ "." + userApplication.userId)
            cloneRightRoleContext(
                userApplication.application.defaultContext.id.value,
                userApplication.context.id.value
            )
        }

        userApplicationManagementApplicationModules.forEach { userModule ->
            val application = userModule.module.application
            val userApplication = UserApplicationEntity.find {
                UserApplicationsTable.applicationId eq application.id and
                        (UserApplicationsTable.userId eq  userModule.userId)
            }.first()

            userModule.context = userApplication.context.createChild(userModule.module.name)
            cloneRightRoleContext(
                userModule.module.defaultContext.id.value,
                userModule.context.id.value
            )
        }

        // Rollback ?
    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
