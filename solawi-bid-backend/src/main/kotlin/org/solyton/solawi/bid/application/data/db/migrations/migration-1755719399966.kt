package org.solyton.solawi.bid.application.data.db.migrations

import org.evoleq.exposedx.migrations.Migration
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.and
import org.jetbrains.exposed.sql.insert
import org.solyton.solawi.bid.module.application.permission.Context
import org.solyton.solawi.bid.module.application.schema.ApplicationContexts
import org.solyton.solawi.bid.module.application.schema.ApplicationContexts.applicationId
import org.solyton.solawi.bid.module.application.schema.ApplicationContexts.contextId
import org.solyton.solawi.bid.module.application.schema.ApplicationEntity
import org.solyton.solawi.bid.module.application.schema.ApplicationsTable
import org.solyton.solawi.bid.module.permission.schema.ContextEntity
import org.solyton.solawi.bid.module.permission.schema.ContextsTable

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Wed Aug 20 21:49:59 CEST 2025
 *
 * Description:
 * Relate application 'Auctions' with auction context in application contexts
 */
class Migration1755719399966(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1755719399966

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        // Relate Auction Application with Auction context
        val auctionContext = ContextEntity.find{
            ContextsTable.rootId eq null and (ContextsTable.name eq Context.Auction.value)
        }.first()
        val auctionApplication = ApplicationEntity.find {
            ApplicationsTable.name eq "AUCTIONS"
        }.first()

        ApplicationContexts.insert {
            it[applicationId] = auctionApplication.id
            it[contextId] = auctionContext.id
        }

    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
