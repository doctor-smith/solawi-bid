package org.solyton.solawi.bid.application.data.db.migrations

import org.evoleq.exposedx.migrations.Migration
import org.evoleq.uuid.UUID_ZERO
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.and
import org.solyton.solawi.bid.module.application.permission.Context
import org.solyton.solawi.bid.module.permission.schema.ContextEntity
import org.solyton.solawi.bid.module.permission.schema.ContextsTable
import org.solyton.solawi.bid.module.permission.schema.RightEntity
import org.solyton.solawi.bid.module.permission.schema.RoleEntity
import org.solyton.solawi.bid.module.permission.schema.RolesTable
import org.solyton.solawi.bid.module.permission.schema.repository.grant
import org.solyton.solawi.bid.module.permission.schema.repository.of

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Sat Sep 27 08:55:19 CEST 2025
 *
 * Description:
 * Add Default Role-Right-Context for auction management module of the auction application
 */
class Migration1758956119471(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1758956119471

    /**
     * Upwards migration
     * The application-context relation exists already, see [Migration1755719399966]
     * It remains to
     * - define the roles and rights and add them to the auction-context.
     * - Add module contexts? and rrc?
     */
    override suspend fun Transaction.up() {
        // get auction context
        val auctionContext = ContextEntity.find{
            ContextsTable.rootId eq null and (ContextsTable.name eq Context.Auction.value)
        }.first()

        // define roles <-> modules
        // given roles
        val owner = RoleEntity.find { RolesTable.name eq "OWNER" }.first()
        val user = RoleEntity.find { RolesTable.name eq "USER" }.first()
        val bidder = RoleEntity.find { RolesTable.name eq "BIDDER" }.first()

        // auction management
        val auctionManager = RoleEntity.new {
            name = "AUCTION_MANAGER"
            description = "Create, read, update, delete and moderate auctions, assign roles related to auctions"
            createdBy = UUID_ZERO
        }
        val auctionTeamManager = RoleEntity.new {
            name = "AUCTION_TEAM_MANAGER"
            description = "Assign roles related to auctions"
            createdBy = UUID_ZERO
        }
        val auctionModerator = RoleEntity.new {
            name = "AUCTION_MODERATOR"
            description = "Moderate auctions. Relates to a specific auction"
            createdBy = UUID_ZERO
        }
        val auctionTeamMate = RoleEntity.new {
            name = "AUCTION_TEAMMATE"
            description = "Supports the auction; e.g. access Bidder information and send bids for prosumers"
            createdBy = UUID_ZERO
        }


        // rights auction
        val createAuction = RightEntity.new {
            name = "CREATE_AUCTION"
            description = "Create an auction"
            createdBy = UUID_ZERO
        }
        val readAuction = RightEntity.new {
            name = "READ_AUCTION"
            description = "Read an auction"
            createdBy = UUID_ZERO
        }
        val updateAuction = RightEntity.new {
            name = "UPDATE_AUCTION"
            description = "Update an auction"
            createdBy = UUID_ZERO
        }
        val deleteAuction = RightEntity.new {
            name = "DELETE_AUCTION"
            description = "Delete an auction"
            createdBy = UUID_ZERO
        }
        val moderateAuction = RightEntity.new {
            name = "MODERATE_AUCTION"
            description = "Moderate an auction"
            createdBy = UUID_ZERO
        }
        val manageAuctionProcessingRoles = RightEntity.new {
            name = "MANAGE_AUCTION_PROCESSING_ROLES"
            description = " "
            createdBy = UUID_ZERO
        }
        val readAuctionProcessingRoles = RightEntity.new {
            name = "READ_AUCTION_PROCESSING_ROLES"
            description = " "
            createdBy = UUID_ZERO
        }
        // bidders
        val createBidder = RightEntity.new {
            name = "CREATE_BIDDER"
            description = "Create bidder"
            createdBy = UUID_ZERO
        }
        val updateBidder = RightEntity.new {
            name = "UPDATE_BIDDER"
            description = "Update bidder"
            createdBy = UUID_ZERO
        }
        val readBidder = RightEntity.new {
            name = "READ_BIDDER"
            description = "Read bidder"
            createdBy = UUID_ZERO
        }
        val deleteBidder = RightEntity.new {
            name = "DELETE_BIDDER"
            description = "Delete bidder"
            createdBy = UUID_ZERO
        }
        val importBidders = RightEntity.new  {
            name = "IMPORT_BIDDERS"
            description = "Import bidders"
            createdBy = UUID_ZERO
        }

        // results
        val exportResults = RightEntity.new {
            name= "Export Results"
            description = "Export results of a bid round / auction"
            createdBy = UUID_ZERO
        }

        // bid
        val sendBidOnBehalf = RightEntity.new {
            name = "SEND_BID_ON_BEHALF"
            description = "Send bid on behalf"
            createdBy = UUID_ZERO
        }
        // bid
        val sendBid = RightEntity.new {
            name = "SEND_BID"
            description = "Send bid"
            createdBy = UUID_ZERO
        }


        // Distribute rights and roles over the auctionContext
        (owner of auctionContext).grant(
            manageAuctionProcessingRoles,
            readAuctionProcessingRoles
        )
        (user of auctionContext).grant(
            readAuction,
        )
        (bidder of auctionContext).grant(
            readAuction,
            sendBid
        )
        (auctionManager of auctionContext).grant(
        readAuctionProcessingRoles,
            manageAuctionProcessingRoles,
            createAuction, readAuction, updateAuction, deleteAuction,
            createBidder, readBidder, updateBidder, deleteBidder,
            importBidders, exportResults,
            sendBidOnBehalf
        )
        (auctionTeamManager of auctionContext).grant(
        readAuctionProcessingRoles,
            manageAuctionProcessingRoles,
        )
        (auctionModerator of auctionContext).grant(
            readAuctionProcessingRoles,
            moderateAuction
        )
        (auctionTeamMate of auctionContext).grant(
            readAuctionProcessingRoles,
            createBidder, readBidder, updateBidder, deleteBidder,
            importBidders, exportResults,
            sendBidOnBehalf
        )
    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
