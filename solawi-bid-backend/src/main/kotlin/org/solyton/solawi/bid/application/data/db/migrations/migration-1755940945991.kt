package org.solyton.solawi.bid.application.data.db.migrations

import org.evoleq.exposedx.migrations.Migration
import org.evoleq.uuid.UUID_ZERO
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.SchemaUtils
import org.jetbrains.exposed.sql.Transaction
import org.solyton.solawi.bid.module.application.schema.LifecycleStageEntity
import org.solyton.solawi.bid.module.application.schema.LifecycleStagesTable
import org.solyton.solawi.bid.module.application.schema.LifecycleTransitionEntity
import org.solyton.solawi.bid.module.application.schema.LifecycleTransitionsTable

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Sat Aug 23 11:22:25 CEST 2025
 *
 * Description:
 * - Add tables
 *   - LifecycleStages
 *   - LifecycleTransitions
 * - Add data
 *
 */
class Migration1755940945991(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1755940945991

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        SchemaUtils.create(
            LifecycleStagesTable,
            LifecycleTransitionsTable
        )

        val registered = LifecycleStageEntity.new {
            name = "REGISTERED"
            description = "User has created an account but not started trial"
            createdBy = UUID_ZERO
        }

        val trialing = LifecycleStageEntity.new {
            name = "TRIALING"
            description = "User is in free trial period"
            createdBy = UUID_ZERO
        }

        val active = LifecycleStageEntity.new {
            name = "ACTIVE"
            description = "User is actively subscribed"
            createdBy = UUID_ZERO
        }

        val paused = LifecycleStageEntity.new {
            name = "PAUSED"
            description = "Subscription temporarily paused"
            createdBy = UUID_ZERO
        }

        val paymentFailedGrace = LifecycleStageEntity.new {
            name = "PAYMENT_FAILED_GRACE_PERIOD"
            description = "Payment failed but subscription temporarily active"
            createdBy = UUID_ZERO
        }

        val cancelled = LifecycleStageEntity.new {
            name = "CANCELLED"
            description = "Subscription cancelled by user or system"
            createdBy = UUID_ZERO
        }

        val churned = LifecycleStageEntity.new {
            name = "CHURNED"
            description = "User inactive after cancellation for extended period"
            createdBy = UUID_ZERO
        }

        // --- Transitions ---
        LifecycleTransitionEntity.new {
            from = registered
            to = trialing
            description = "User starts trial"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = trialing
            to = active
            description = "User converts from trial to paid"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = trialing
            to = cancelled
            description = "Trial ended without subscription"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = active
            to = paused
            description = "User pauses subscription"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = paused
            to = active
            description = "User resumes subscription"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = active
            to = paymentFailedGrace
            description = "Payment failed, grace period"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = paymentFailedGrace
            to = active
            description = "Payment resolved, subscription restored"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = paymentFailedGrace
            to = cancelled
            description = "Payment not resolved, subscription cancelled"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = active
            to = cancelled
            description = "User cancels subscription"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = cancelled
            to = churned
            description = "User inactive after cancellation"
            createdBy = UUID_ZERO
        }
    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
