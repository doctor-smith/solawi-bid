package org.solyton.solawi.bid.application.data.db.migrations

import org.evoleq.exposedx.migrations.Migration
import org.evoleq.uuid.UUID_ZERO
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.SchemaUtils
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.and
import org.jetbrains.exposed.sql.insert
import org.solyton.solawi.bid.application.permission.Role
import org.solyton.solawi.bid.module.application.permission.Context
import org.solyton.solawi.bid.module.application.schema.ApplicationContexts
import org.solyton.solawi.bid.module.application.schema.ApplicationEntity
import org.solyton.solawi.bid.module.application.schema.ApplicationsTable
import org.solyton.solawi.bid.module.application.schema.ModuleContexts
import org.solyton.solawi.bid.module.application.schema.ModuleEntity
import org.solyton.solawi.bid.module.application.schema.ModulesTable
import org.solyton.solawi.bid.module.permission.schema.ContextEntity
import org.solyton.solawi.bid.module.permission.schema.ContextsTable
import org.solyton.solawi.bid.module.permission.schema.RightEntity
import org.solyton.solawi.bid.module.permission.schema.RoleEntity
import org.solyton.solawi.bid.module.permission.schema.RolesTable
import org.solyton.solawi.bid.module.permission.schema.repository.createChild
import org.solyton.solawi.bid.module.permission.schema.repository.grant
import org.solyton.solawi.bid.module.permission.schema.repository.of

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Wed Aug 20 21:18:03 CEST 2025
 *
 * Description:
 * - Add tables: ApplicationContexts, ModuleContexts.
 * - Relate applications 'Application Management'  and 'Auctions' with contexts
 * - Create corresponding Roles and Rights
 * - Define role-right-context
 */
class Migration1755717483732(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1755717483732

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        // Add tables
        SchemaUtils.create(
            ApplicationContexts,
            ModuleContexts
        )

        // Relate Application Management with context
        val applicationContext = ContextEntity.find{
            ContextsTable.rootId eq null and (ContextsTable.name eq Context.Application.value)
        }.first()

        val applicationManagementContext = applicationContext.createChild("MANAGEMENT")
        val appManagementApplication = ApplicationEntity.find {
            ApplicationsTable.name eq "APPLICATION_MANAGEMENT"
        }.first()

        ApplicationContexts.insert {
            it[applicationId] = appManagementApplication.id
            it[contextId] = applicationManagementContext.id
        }

        // Create context TECHNICAL_APPLICATION_MANAGEMENT and relate it to
        // the corresponding modules
        val technicalApplicationManagementModule = ModuleEntity.find{
            (ModulesTable.applicationId eq appManagementApplication.id.value) and
            (ModulesTable.name eq "TECHNICAL_APPLICATION_MANAGEMENT")
        }.first()
        val technicalApplicationManagementContext = applicationManagementContext.createChild(
            "TECHNICAL_APPLICATION_MANAGEMENT",
        )
        ModuleContexts.insert {
            it[moduleId] = technicalApplicationManagementModule.id.value
            it[contextId] = technicalApplicationManagementContext.id.value
        }


        // Create context ORGANIZATION_MANAGEMENT and relate it to
        // the corresponding modules
        val organizationManagementModule = ModuleEntity.find{
            (ModulesTable.applicationId eq appManagementApplication.id.value) and
                    (ModulesTable.name eq "ORGANIZATION_MANAGEMENT")
        }.first()
        val organizationManagementContext = applicationManagementContext.createChild(
            "ORGANIZATION_MANAGEMENT",
        )
        ModuleContexts.insert {
            it[moduleId] = organizationManagementModule.id.value
            it[contextId] = organizationManagementContext.id.value
        }

        // Create context APPLICATION_USER_MANAGEMENT and relate it to
        // the corresponding modules
        val applicationUserManagementModule = ModuleEntity.find{
            (ModulesTable.applicationId eq appManagementApplication.id.value) and
                    (ModulesTable.name eq "APPLICATION_USER_MANAGEMENT")
        }.first()
        val applicationUserManagementContext = applicationManagementContext.createChild(
            "APPLICATION_USER_MANAGEMENT",
        )
        ModuleContexts.insert {
            it[moduleId] = applicationUserManagementModule.id.value
            it[contextId] = applicationUserManagementContext.id.value
        }

        // Create context FINANCIAL_TOOLING and relate it to
        // the corresponding modules
        val financialToolingManagementModule = ModuleEntity.find{
            (ModulesTable.applicationId eq appManagementApplication.id.value) and
                    (ModulesTable.name eq "FINANCIAL_TOOLING")
        }.first()
        val financialToolingManagementContext = applicationManagementContext.createChild(
            "FINANCIAL_TOOLING",
        )
        ModuleContexts.insert {
            it[moduleId] = financialToolingManagementModule.id.value
            it[contextId] = financialToolingManagementContext.id.value
        }

        // Rights
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // - crud Apps
        // - crud Modules
        // - crud contexts rights and roles
        val createApplication = RightEntity.new {
            name = "CREATE_APPLICATION"
            description = "Create Applications"
            createdBy = UUID_ZERO
        }
        val readApplication = RightEntity.new {
            name = "READ_APPLICATION"
            description = "Read Applications"
            createdBy = UUID_ZERO
        }
        val updateApplication = RightEntity.new {
            name = "UPDATE_APPLICATION"
            description = "Update Applications"
            createdBy = UUID_ZERO
        }
        val deleteApplication = RightEntity.new {
            name = "DELETE_APPLICATION"
            description = "Delete Applications"
            createdBy = UUID_ZERO
        }

        val createModule = RightEntity.new {
            name = "CREATE_MODULE"
            description = "Create Modules"
            createdBy = UUID_ZERO
        }
        val readModule = RightEntity.new {
            name = "READ_MODULE"
            description = "Read Modules"
            createdBy = UUID_ZERO
        }
        val updateModule = RightEntity.new {
            name = "UPDATE_MODULE"
            description = "Update Modules"
            createdBy = UUID_ZERO
        }
        val deleteModule = RightEntity.new {
            name = "DELETE_MODULE"
            description = "Delete Modules"
            createdBy = UUID_ZERO
        }

        val createRight = RightEntity.new {
            name = "CREATE_RIGHT"
            description = "Create Rights"
            createdBy = UUID_ZERO
        }
        val readRight = RightEntity.new {
            name = "READ_RIGHT"
            description = "Read Rights"
            createdBy = UUID_ZERO
        }
        val updateRight = RightEntity.new {
            name = "UPDATE_RIGHT"
            description = "Update Rights"
            createdBy = UUID_ZERO
        }
        val deleteRight = RightEntity.new {
            name = "DELETE_RIGHT"
            description = "Delete Rights"
            createdBy = UUID_ZERO
        }

        val createRole = RightEntity.new {
            name = "CREATE_ROLE"
            description = "Create Roles"
            createdBy = UUID_ZERO
        }
        val readRole = RightEntity.new {
            name = "READ_ROLE"
            description = "Read Roles"
            createdBy = UUID_ZERO
        }
        val updateRole = RightEntity.new {
            name = "UPDATE_ROLE"
            description = "Update Roles"
            createdBy = UUID_ZERO
        }
        val deleteRole = RightEntity.new {
            name = "DELETE_ROLE"
            description = "Delete Roles"
            createdBy = UUID_ZERO
        }

        val createContext = RightEntity.new {
            name = "CREATE_CONTEXT"
            description = "Create Contexts"
            createdBy = UUID_ZERO
        }
        val readContext = RightEntity.new {
            name = "READ_CONTEXT"
            description = "Read Contexts"
            createdBy = UUID_ZERO
        }
        val updateContext = RightEntity.new {
            name = "UPDATE_CONTEXT"
            description = "Update Contexts"
            createdBy = UUID_ZERO
        }
        val deleteContext = RightEntity.new {
            name = "DELETE_CONTEXT"
            description = "Delete Contexts"
            createdBy = UUID_ZERO
        }

        val manageRoleRightContexts = RightEntity.new {
            name = "MANAGE_ROLE_RIGHT_CONTEXTS"
            description = "Manage role-right-contexts: Assign / unassing rights and roles to / from contexts"
            createdBy = UUID_ZERO
        }

        // USER_MANAGEMENT
        val createUser = RightEntity.new {
            name = "CREATE_USER"
            description = "Create Users"
            createdBy = UUID_ZERO
        }
        val readUser = RightEntity.new {
            name = "READ_USER"
            description = "Read Users"
            createdBy = UUID_ZERO
        }
        val updateUser = RightEntity.new {
            name = "UPDATE_USER"
            description = "Update Users"
            createdBy = UUID_ZERO
        }
        val deleteUser = RightEntity.new {
            name = "DELETE_USER"
            description = "Delete Users"
            createdBy = UUID_ZERO
        }

        val manageUserRoleContexts = RightEntity.new {
            name = "MANAGE_USER_ROLE_CONTEXTS"
            description = "Manage user-role-contexts: Assign / unassing context-related roles to / from users"
            createdBy = UUID_ZERO
        }

        val manageApplicationAccess = RightEntity.new {
            name = "MANAGE_ACCESS_TO_APPS"
            description = "Manage access to apps and modules: Assign / unassing apps and modules roles to / from users"
            createdBy = UUID_ZERO
        }


        // Roles
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        val owner: RoleEntity = RoleEntity.find { RolesTable.name eq Role.owner.value }.first()
        val user: RoleEntity = RoleEntity.find { RolesTable.name eq Role.user.value }.first()
        val technicalApplicationManager = RoleEntity.new {
            name = "TECHNICAL_APPLICATION_MANAGER"
            description = "Manage applications, modules, rights, roles, contexts and role-right-contexts in the Application Management App"
            createdBy = UUID_ZERO
        }
        val applicationOrganizationManager = RoleEntity.new {
            name = "APPLICATION_ORGANIZATION_MANAGER"
            description = "Manage users of the application, assign rights and roles related to contexts"
            createdBy = UUID_ZERO
        }

        val applicationAccessManager = RoleEntity.new {
            name = "APPLICATION_ACCESS_MANAGER"
            description = "Assign / Unassign apps and modules to users"
            createdBy = UUID_ZERO
        }

        //Role Right Contexts
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // Technical Application Management Context
        (technicalApplicationManager of technicalApplicationManagementContext).grant(
            createApplication, readApplication, updateApplication, deleteApplication,
            createModule, readModule, updateModule, deleteModule,
            createRight, readRight, updateRight, deleteRight,
            createRole, readRole, updateRole, deleteRole,
            createContext, readContext, updateContext, deleteContext,
            manageRoleRightContexts
        )
        (owner of technicalApplicationManagementContext).grant(
            createApplication, readApplication, updateApplication, deleteApplication,
            createModule, readModule, updateModule, deleteModule,
            createRight, readRight, updateRight, deleteRight,
            createRole, readRole, updateRole, deleteRole,
            createContext, readContext, updateContext, deleteContext,
            manageRoleRightContexts
        )
        (user of technicalApplicationManagementContext).grant(
            readApplication,
            readModule,
            readRight,
            readRole,
            readContext,
        )

        // Application Management Context
        (technicalApplicationManager of applicationManagementContext).grant(
             readApplication,
             readModule,
             readRight,
             readRole,
             readContext,
        )
        (owner of applicationManagementContext).grant(
            readApplication,
            readModule,
            readRight,
            readRole,
            readContext,
        )
        (user of applicationManagementContext).grant(
            readApplication,
            readModule,
            readRight,
            readRole,
            readContext,
        )

        // Context APPLICATION_USER_MANAGEMENT
        (applicationAccessManager of applicationUserManagementContext).grant(
            readRole,
            readRight,
            readContext,
            readApplication,
            readModule,
            manageApplicationAccess
        )
        (owner of applicationUserManagementContext).grant(
            readRole,
            readRight,
            readContext,
            readApplication,
            readModule,
            manageApplicationAccess
        )

        // Context APPLICATION_ORGANIZATION_MANAGEMENT
        (applicationOrganizationManager of organizationManagementContext).grant(
            createUser,
            readUser,
            updateUser,
            deleteUser,
            readRole,
            readRight,
            readContext,
            manageUserRoleContexts
        )
        (owner of organizationManagementContext).grant(
            createUser,
            readUser,
            updateUser,
            deleteUser,
            readRole,
            readRight,
            readContext,
            manageUserRoleContexts
        )


        // Context FINANCIAL_TOOLING <-- later
    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
