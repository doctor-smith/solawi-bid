package org.solyton.solawi.bid.module.application.migrations

import org.evoleq.exposedx.migrations.Migration
import org.evoleq.uuid.UUID_ZERO
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.SchemaUtils
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.insert
import org.solyton.solawi.bid.module.application.repository.createApplication
import org.solyton.solawi.bid.module.application.repository.createModule
import org.solyton.solawi.bid.module.application.repository.registerForApplication
import org.solyton.solawi.bid.module.application.repository.registerForModule
import org.solyton.solawi.bid.module.application.schema.*
import org.solyton.solawi.bid.module.application.schema.LifecycleStageEntity
import org.solyton.solawi.bid.module.application.schema.LifecycleTransitionEntity
import org.solyton.solawi.bid.module.permission.schema.*
import org.solyton.solawi.bid.module.permission.schema.ContextEntity
import org.solyton.solawi.bid.module.permission.schema.RightEntity
import org.solyton.solawi.bid.module.permission.schema.RoleEntity
import org.solyton.solawi.bid.module.permission.schema.repository.grant
import org.solyton.solawi.bid.module.permission.schema.repository.of
import org.solyton.solawi.bid.module.user.schema.OrganizationsTable
import org.solyton.solawi.bid.module.user.schema.TokensTable
import org.solyton.solawi.bid.module.user.schema.UserEntity
import org.solyton.solawi.bid.module.user.schema.UsersTable

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Wed Aug 27 18:42:05 CEST 2025
 *
 * Description: ...
 */
class Migration1756312925919(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1756312925919

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        SchemaUtils.create(
            TokensTable,
            RolesTable,
            RightsTable,
            ContextsTable,
            RoleRightContexts,

            UsersTable,
            OrganizationsTable,
            UserRoleContext,

            ApplicationsTable,
            ModulesTable,
            UserApplicationsTable,
            UserModulesTable,
            LifecycleStagesTable,
            LifecycleTransitionsTable,
            ApplicationContextsTable,
            ModuleContextsTable,
        )

        val developer = UserEntity.new {
            username = "developer@solyton.org"
            password = "$2a$10$5EENEnXKE4oNT0AejWzy8Oa09DkBDiQTnk2LyqtqpBa3DrZijo51O"
            createdBy = UUID_ZERO
        }

        // val dummyUsers =
        (0..9).map {
            UserEntity.new {
                username = "dummy_$it@solyton.org"
                password = "$2a$10$5EENEnXKE4oNT0AejWzy8Oa09DkBDiQTnk2LyqtqpBa3DrZijo51O"
                createdBy = UUID_ZERO
            }
        }.toTypedArray()

        val applicationContext = ContextEntity.new {
            name = "APPLICATION"
            createdBy = UUID_ZERO
        }


        ContextEntity.new {
            name = "DUMMY_CONTEXT"
            createdBy = UUID_ZERO
        }

        val userRole = RoleEntity.new{
            name = "USER"
            description = "DESCRIPTION"
            createdBy = UUID_ZERO
        }

        val readApplications = RightEntity.new {
            name = "READ_APPLICATION"
            description = "DESCRIPTION"
            createdBy = UUID_ZERO
        }

        val subscribeApplications = RightEntity.new {
            name = "SUBSCRIBE_APPLICATION"
            description = "DESCRIPTION"
            createdBy = UUID_ZERO
        }

        (userRole of  applicationContext).grant(
            readApplications,
            subscribeApplications
        )

        UserRoleContext.insert {
            it[userId] = developer.id.value
            it[roleId] = userRole.id.value
            it[contextId] = applicationContext.id.value
        }



        val applicationManagementApplication = createApplication(
            "APPLICATION_MANAGEMENT",
            "Manage all aspects of the Solyton Application",
            UUID_ZERO
        )

        val orgaManagementModule = createModule(
            "ORGANIZATION_MANAGEMENT",
            "Manage members, Access rights",
            applicationManagementApplication.id.value,
            UUID_ZERO
        )
        createModule(
            "TECHNICAL_APPLICATION_MANAGEMENT",
            "Manage applications, modules, Rights and Roles",
            applicationManagementApplication.id.value,
            UUID_ZERO
        )
        createModule(
            "APPLICATION_USER_MANAGEMENT",
            "Manage Access to Apps",
            applicationManagementApplication.id.value,
            UUID_ZERO
        )
        createModule(
            "FINANCIAL_TOOLING",
            "Financial Tooling, Reporting, Forecasts",
            applicationManagementApplication.id.value,
            UUID_ZERO
        )


        val auctionApplication = createApplication(
            "AUCTIONS",
            "Auctions Application",
            UUID_ZERO
        )
        createModule(
            "ORGANIZATION_MANAGEMENT",
            "Manage Organization, Members, Shares, Depots, ...",
            auctionApplication.id.value,
            UUID_ZERO
        )
        createModule(
            "AUCTION_MANAGEMENT",
            "Manage Auctions",
            auctionApplication.id.value,
            UUID_ZERO
        )
        createModule(
            "FINANCIAL_TOOLING",
            "Financial Tooling, Reporting, Forecasts, Manage Payments",
            auctionApplication.id.value,
            UUID_ZERO
        )
        createModule(
            "ORGANIZATION_TO_PROSUMER_COMMUNICATION",
            "Communicate to the Prosumers",
            auctionApplication.id.value,
            UUID_ZERO
        )
        createModule(
            "CONSENSING_TOOLS",
            "Consensing Tools helping to make better decisions in democratic communities",
            auctionApplication.id.value,
            UUID_ZERO
        )

        val registered = LifecycleStageEntity.new {
            name = "REGISTERED"
            description = "User has created an account but not started trial"
            createdBy = UUID_ZERO
        }

        val trialing = LifecycleStageEntity.new {
            name = "TRIALING"
            description = "User is in free trial period"
            createdBy = UUID_ZERO
        }

        val active = LifecycleStageEntity.new {
            name = "ACTIVE"
            description = "User is actively subscribed"
            createdBy = UUID_ZERO
        }

        val paused = LifecycleStageEntity.new {
            name = "PAUSED"
            description = "Subscription temporarily paused"
            createdBy = UUID_ZERO
        }

        val paymentFailedGrace = LifecycleStageEntity.new {
            name = "PAYMENT_FAILED_GRACE_PERIOD"
            description = "Payment failed but subscription temporarily active"
            createdBy = UUID_ZERO
        }

        val cancelled = LifecycleStageEntity.new {
            name = "CANCELLED"
            description = "Subscription cancelled by user or system"
            createdBy = UUID_ZERO
        }

        val churned = LifecycleStageEntity.new {
            name = "CHURNED"
            description = "User inactive after cancellation for extended period"
            createdBy = UUID_ZERO
        }

        // --- Transitions ---
        LifecycleTransitionEntity.new {
            from = registered
            to = trialing
            description = "User starts trial"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = trialing
            to = active
            description = "User converts from trial to paid"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = trialing
            to = cancelled
            description = "Trial ended without subscription"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = active
            to = paused
            description = "User pauses subscription"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = paused
            to = active
            description = "User resumes subscription"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = active
            to = paymentFailedGrace
            description = "Payment failed, grace period"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = paymentFailedGrace
            to = active
            description = "Payment resolved, subscription restored"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = paymentFailedGrace
            to = cancelled
            description = "Payment not resolved, subscription cancelled"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = active
            to = cancelled
            description = "User cancels subscription"
            createdBy = UUID_ZERO
        }

        LifecycleTransitionEntity.new {
            from = cancelled
            to = churned
            description = "User inactive after cancellation"
            createdBy = UUID_ZERO
        }

        registerForApplication(developer.id.value, applicationManagementApplication.id.value)
        registerForModule(developer.id.value, orgaManagementModule.id.value)

        commit()
    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
