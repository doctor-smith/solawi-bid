package org.solyton.solawi.bid.module.bid.routing.migrations

import org.evoleq.exposedx.migrations.Migration
import org.evoleq.uuid.UUID_ZERO
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.SchemaUtils
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.insert
import org.solyton.solawi.bid.module.application.repository.createApplication
import org.solyton.solawi.bid.module.application.repository.createModule
import org.solyton.solawi.bid.module.application.repository.registerForApplication
import org.solyton.solawi.bid.module.application.schema.*
import org.solyton.solawi.bid.module.application.schema.LifecycleStageEntity
import org.solyton.solawi.bid.module.application.schema.LifecycleTransitionEntity
import org.solyton.solawi.bid.module.permission.schema.ContextEntity
import org.solyton.solawi.bid.module.permission.schema.RightEntity
import org.solyton.solawi.bid.module.permission.schema.RightsTable
import org.solyton.solawi.bid.module.permission.schema.RoleEntity
import org.solyton.solawi.bid.module.permission.schema.RoleRightContexts
import org.solyton.solawi.bid.module.permission.schema.RolesTable
import org.solyton.solawi.bid.module.permission.schema.UserRoleContext
import org.solyton.solawi.bid.module.permission.schema.repository.createChild
import org.solyton.solawi.bid.module.permission.schema.repository.createRootContext
import org.solyton.solawi.bid.module.permission.schema.repository.grant
import org.solyton.solawi.bid.module.permission.schema.repository.of
import org.solyton.solawi.bid.module.user.schema.UserEntity
import org.solyton.solawi.bid.module.user.schema.Users

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Mon Oct 27 09:09:49 CET 2025
 *
 * Description: Create role-right-contexts, auction application:
 * Add tables
 * - Contexts (already done in [Migration1730372270554])
 * - Role
 * - Right
 * - RoleRightContexts
 * - UserRoleContexts
 *
 *
 *
 */
class Migration1761552589179(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1761552589179

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        SchemaUtils.create(
            RolesTable,
            RightsTable,
            RoleRightContexts,
            UserRoleContext,
            ApplicationsTable,
            ModulesTable,
            UserApplicationsTable,
            UserModulesTable,
            LifecycleStagesTable,
            LifecycleTransitionsTable
        )

        // get auction context
        val auctionsApplicationContext = ContextEntity.new{
            name = "AUCTIONS"
            createdBy = UUID_ZERO
        }

        // val testAuctionContext =
        auctionsApplicationContext.createChild("TEST_AUCTION_CONTEXT")

        // define roles <-> modules
        // given roles
        val owner = RoleEntity.new{
            name = "OWNER"
            description = "Owner"
            createdBy = UUID_ZERO
        }
        val user = RoleEntity.new {
            name = "USER"
            description = "User"
            createdBy = UUID_ZERO
        }
        val bidder = RoleEntity.new {
            name = "BIDDER"
            description = "Bidder"
            createdBy = UUID_ZERO
        }
        // auction management
        val auctionManager = RoleEntity.new {
            name = "AUCTION_MANAGER"
            description = "Create, read, update, delete and moderate auctions, assign roles related to auctions"
            createdBy = UUID_ZERO
        }
        val auctionTeamManager = RoleEntity.new {
            name = "AUCTION_TEAM_MANAGER"
            description = "Assign roles related to auctions"
            createdBy = UUID_ZERO
        }
        val auctionModerator = RoleEntity.new {
            name = "AUCTION_MODERATOR"
            description = "Moderate auctions. Relates to a specific auction"
            createdBy = UUID_ZERO
        }
        val auctionTeamMate = RoleEntity.new {
            name = "AUCTION_TEAMMATE"
            description = "Supports the auction; e.g. access Bidder information and send bids for prosumers"
            createdBy = UUID_ZERO
        }


        // rights auction
        val createAuction = RightEntity.new {
            name = "CREATE_AUCTION"
            description = "Create an auction"
            createdBy = UUID_ZERO
        }
        val readAuction = RightEntity.new {
            name = "READ_AUCTION"
            description = "Read an auction"
            createdBy = UUID_ZERO
        }
        val updateAuction = RightEntity.new {
            name = "UPDATE_AUCTION"
            description = "Update an auction"
            createdBy = UUID_ZERO
        }
        val deleteAuction = RightEntity.new {
            name = "DELETE_AUCTION"
            description = "Delete an auction"
            createdBy = UUID_ZERO
        }
        val moderateAuction = RightEntity.new {
            name = "MODERATE_AUCTION"
            description = "Moderate an auction"
            createdBy = UUID_ZERO
        }
        val manageAuctionProcessingRoles = RightEntity.new {
            name = "MANAGE_AUCTION_PROCESSING_ROLES"
            description = " "
            createdBy = UUID_ZERO
        }
        val readAuctionProcessingRoles = RightEntity.new {
            name = "READ_AUCTION_PROCESSING_ROLES"
            description = " "
            createdBy = UUID_ZERO
        }
        // bidders
        val createBidder = RightEntity.new {
            name = "CREATE_BIDDER"
            description = "Create bidder"
            createdBy = UUID_ZERO
        }
        val updateBidder = RightEntity.new {
            name = "UPDATE_BIDDER"
            description = "Update bidder"
            createdBy = UUID_ZERO
        }
        val readBidder = RightEntity.new {
            name = "READ_BIDDER"
            description = "Read bidder"
            createdBy = UUID_ZERO
        }
        val deleteBidder = RightEntity.new {
            name = "DELETE_BIDDER"
            description = "Delete bidder"
            createdBy = UUID_ZERO
        }
        val importBidders = RightEntity.new  {
            name = "IMPORT_BIDDERS"
            description = "Import bidders"
            createdBy = UUID_ZERO
        }

        // results
        val exportResults = RightEntity.new {
            name= "Export Results"
            description = "Export results of a bid round / auction"
            createdBy = UUID_ZERO
        }

        // bid
        val sendBidOnBehalf = RightEntity.new {
            name = "SEND_BID_ON_BEHALF"
            description = "Send bid on behalf"
            createdBy = UUID_ZERO
        }
        // bid
        val sendBid = RightEntity.new {
            name = "SEND_BID"
            description = "Send bid"
            createdBy = UUID_ZERO
        }


        // Distribute rights and roles over the auctionContext
        (owner of auctionsApplicationContext).grant(
            manageAuctionProcessingRoles,
            readAuctionProcessingRoles
        )
        (user of auctionsApplicationContext).grant(
            readAuction,
        )
        (bidder of auctionsApplicationContext).grant(
            readAuction,
            sendBid
        )
        (auctionManager of auctionsApplicationContext).grant(
            readAuctionProcessingRoles,
            manageAuctionProcessingRoles,
            createAuction, readAuction, updateAuction, deleteAuction,
            createBidder, readBidder, updateBidder, deleteBidder,
            importBidders, exportResults,
            sendBidOnBehalf
        )
        (auctionTeamManager of auctionsApplicationContext).grant(
            readAuctionProcessingRoles,
            manageAuctionProcessingRoles,
        )
        (auctionModerator of auctionsApplicationContext).grant(
            readAuctionProcessingRoles,
            moderateAuction
        )
        (auctionTeamMate of auctionsApplicationContext).grant(
            readAuctionProcessingRoles,
            createBidder, readBidder, updateBidder, deleteBidder,
            importBidders, exportResults,
            sendBidOnBehalf
        )


        // provide user rights
        val userAtSolyton = UserEntity.find { Users.username eq "user@solyton.org" }.first()
        UserRoleContext.insert {
            it[userId] = userAtSolyton.id.value
            it[roleId] = user.id.value
            it[contextId] = auctionsApplicationContext.id.value
        }

        // provide user rights
        val ownerAtSolyton = UserEntity.find { Users.username eq "owner@solyton.org" }.first()
        UserRoleContext.insert {
            it[userId] = ownerAtSolyton.id.value
            it[roleId] = owner.id.value
            it[contextId] = auctionsApplicationContext.id.value
        }

        val auctionManagerUser = UserEntity.find { Users.username eq "auction.manager@solyton.org" }.first()
        UserRoleContext.insert {
            it[userId] = auctionManagerUser.id.value
            it[roleId] = auctionManager.id.value
            it[contextId] = auctionsApplicationContext.id.value
        }


        // create auction application
        val auctionApplication = createAuctionApplication()

        // lifecycle stages
        addLifecycleStages()
    // register auctionManager for auction application
        registerForApplication(auctionManagerUser.id.value, auctionApplication.id.value)
    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}

fun Transaction.createAuctionApplication(): ApplicationEntity {
    createRootContext("EMPTY")
    val auctionApplication = createApplication(
        "AUCTIONS",
        "Auctions Application",
        UUID_ZERO
    )
    createModule(
        "ORGANIZATION_MANAGEMENT",
        "Manage Organization, Members, Shares, Depots, ...",
        auctionApplication.id.value,
        UUID_ZERO
    )
    createModule(
        "AUCTION_MANAGEMENT",
        "Manage Auctions",
        auctionApplication.id.value,
        UUID_ZERO
    )
    createModule(
        "FINANCIAL_TOOLING",
        "Financial Tooling, Reporting, Forecasts, Manage Payments",
        auctionApplication.id.value,
        UUID_ZERO
    )
    createModule(
        "ORGANIZATION_TO_PROSUMER_COMMUNICATION",
        "Communicate to the Prosumers",
        auctionApplication.id.value,
        UUID_ZERO
    )
    createModule(
        "CONSENSING_TOOLS",
        "Consensing Tools helping to make better decisions in democratic communities",
        auctionApplication.id.value,
        UUID_ZERO
    )
    return auctionApplication
}

fun addLifecycleStages() {
    val registered = LifecycleStageEntity.new {
        name = "REGISTERED"
        description = "User has created an account but not started trial"
        createdBy = UUID_ZERO
    }

    val trialing = LifecycleStageEntity.new {
        name = "TRIALING"
        description = "User is in free trial period"
        createdBy = UUID_ZERO
    }

    val active = LifecycleStageEntity.new {
        name = "ACTIVE"
        description = "User is actively subscribed"
        createdBy = UUID_ZERO
    }

    val paused = LifecycleStageEntity.new {
        name = "PAUSED"
        description = "Subscription temporarily paused"
        createdBy = UUID_ZERO
    }

    val paymentFailedGrace = LifecycleStageEntity.new {
        name = "PAYMENT_FAILED_GRACE_PERIOD"
        description = "Payment failed but subscription temporarily active"
        createdBy = UUID_ZERO
    }

    val cancelled = LifecycleStageEntity.new {
        name = "CANCELLED"
        description = "Subscription cancelled by user or system"
        createdBy = UUID_ZERO
    }

    val churned = LifecycleStageEntity.new {
        name = "CHURNED"
        description = "User inactive after cancellation for extended period"
        createdBy = UUID_ZERO
    }

    // --- Transitions ---
    LifecycleTransitionEntity.new {
        from = registered
        to = trialing
        description = "User starts trial"
        createdBy = UUID_ZERO
    }

    LifecycleTransitionEntity.new {
        from = trialing
        to = active
        description = "User converts from trial to paid"
        createdBy = UUID_ZERO
    }

    LifecycleTransitionEntity.new {
        from = trialing
        to = cancelled
        description = "Trial ended without subscription"
        createdBy = UUID_ZERO
    }

    LifecycleTransitionEntity.new {
        from = active
        to = paused
        description = "User pauses subscription"
        createdBy = UUID_ZERO
    }

    LifecycleTransitionEntity.new {
        from = paused
        to = active
        description = "User resumes subscription"
        createdBy = UUID_ZERO
    }

    LifecycleTransitionEntity.new {
        from = active
        to = paymentFailedGrace
        description = "Payment failed, grace period"
        createdBy = UUID_ZERO
    }

    LifecycleTransitionEntity.new {
        from = paymentFailedGrace
        to = active
        description = "Payment resolved, subscription restored"
        createdBy = UUID_ZERO
    }

    LifecycleTransitionEntity.new {
        from = paymentFailedGrace
        to = cancelled
        description = "Payment not resolved, subscription cancelled"
        createdBy = UUID_ZERO
    }

    LifecycleTransitionEntity.new {
        from = active
        to = cancelled
        description = "User cancels subscription"
        createdBy = UUID_ZERO
    }

    LifecycleTransitionEntity.new {
        from = cancelled
        to = churned
        description = "User inactive after cancellation"
        createdBy = UUID_ZERO
    }
}
