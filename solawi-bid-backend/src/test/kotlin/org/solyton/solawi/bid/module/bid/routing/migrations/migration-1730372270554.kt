package org.solyton.solawi.bid.module.bid.routing.migrations

import org.evoleq.exposedx.migrations.Migration
import org.evoleq.uuid.UUID_ZERO
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.SchemaUtils
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.insert
import org.joda.time.DateTime
import org.solyton.solawi.bid.module.bid.schema.*
import org.solyton.solawi.bid.module.permission.schema.ContextsTable
import org.solyton.solawi.bid.module.permission.schema.repository.createRootContext

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Thu Oct 31 11:57:50 CET 2024
 *
 * Description:
 * Test-Migration used by int the bid-module
 * - Adds tables:
 *   - Auctions,
 *   - Rounds,
 *   - BidRounds,
 *   - Bidders,
 *   - AuctionBidders,
 *   - AuctionTypes,
 *   - AuctionDetailsSolawiTuebingenTable,
 *   - BidderDetailsSolawiTuebingenTable
 * - Adds some test data
 */
class Migration1730372270554(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1730372270554

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        SchemaUtils.create(
            Auctions,
            Rounds,
            BidRounds,
            Bidders,
            AuctionBidders,
            AuctionTypes,
            AuctionDetailsSolawiTuebingenTable,
            BidderDetailsSolawiTuebingenTable,
            AcceptedRoundsTable,
            RoundCommentsTable,
            ContextsTable
        )
        val typeName = "SOLAWI_TUEBINGEN"
        val auctionType = AuctionType.find { AuctionTypes.type eq  typeName}.firstOrNull()
            ?: AuctionType.new {
                type = typeName
            }
        val dummyRootContext = createRootContext("DUMMY_ROOT_CONTEXT")

        // db setup
        // create an auction
        val auction = Auction.new {
            name = "TestAuction"
            date = DateTime().withDate(1,1,1)
            type = auctionType
            createdBy = UUID_ZERO
            context = dummyRootContext
        }
        // create a round in the auction
        // note: state is "OPENED" by default.
        val round = Round.new {
            this.auction = auction
            link = "test-link"
            createdBy = UUID_ZERO
            //state = RoundState.Started.toString()
        }
        auction.rounds+round
        // invite bidders to the auction
        val bidder = Bidder.new {
            username = "test-user"
            type = auctionType
            //weblingId = 1
            //numberOfParts = 1
            createdBy = UUID_ZERO
        }
        AuctionBidders.insert{
            it[AuctionBidders.auctionId] = auction.id
            it[AuctionBidders.bidderId] = bidder.id
        }
        BidderDetailsSolawiTuebingenTable.insert{
            it[weblingId] = 1
            it[numberOfShares] = 1
            it[bidderId] = bidder.id.value
            it[createdBy] = UUID_ZERO
        }
        auction.bidders+bidder

    }

    /**
     * Downwards migration (inverse to the upward migration).
     * These migrations are not taken into account by now!
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }
}
