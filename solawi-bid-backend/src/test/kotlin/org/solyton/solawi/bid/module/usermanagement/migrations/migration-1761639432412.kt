package org.solyton.solawi.bid.module.usermanagement.migrations

import org.evoleq.exposedx.migrations.Migration
import org.evoleq.uuid.UUID_ZERO
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.Transaction
import org.jetbrains.exposed.sql.insert
import org.solyton.solawi.bid.module.permission.schema.ContextEntity
import org.solyton.solawi.bid.module.permission.schema.RightEntity
import org.solyton.solawi.bid.module.permission.schema.RoleEntity
import org.solyton.solawi.bid.module.permission.schema.UserRoleContext
import org.solyton.solawi.bid.module.permission.schema.repository.createRootContext
import org.solyton.solawi.bid.module.permission.schema.repository.grant
import org.solyton.solawi.bid.module.permission.schema.repository.of
import org.solyton.solawi.bid.module.user.schema.UserEntity
import org.solyton.solawi.bid.module.user.schema.UsersTable

/**
 * Autogenerated [Migration],
 * generated by the evoleq/exposedx migration gradle-plugin.
 * Alter with care!
 *
 * Generated at Tue Oct 28 09:17:12 CET 2025
 *
 * Description: Setup basic permissions
 */
class Migration1761639432412(
    override val database: Database
) : Migration {

    /**
     * Id of the migration, do not change!
     */
    override val id: Long
        get() = 1761639432412

    /**
     * Upwards migration
     */
    override suspend fun Transaction.up() {
        val developer = UserEntity.find{ UsersTable.username eq "developer@alpha-structure.com" }.first()
        val unauthorizedUser = UserEntity.new {
            username = "unautorized@solyton.org"
            password = "jfdkdjs√∂KD"
            createdBy = UUID_ZERO
        }
        val applicationContext = createRootContext("APPLICATION")

        val developerRole = RoleEntity.new {
            name = "DEVELOPER"
            description = "obvious"
            createdBy = UUID_ZERO
        }
        // val managerRole =
        RoleEntity.new {
            name = "MANAGER"
            description = "Manage something"
            createdBy = UUID_ZERO
        }

        RoleEntity.new {
            name = "USER"
            description = "Use something"
            createdBy = UUID_ZERO
        }

        val readOrganization = RightEntity.new {
            name = "READ_ORGANIZATION"
            description = "Create organization"
            createdBy = UUID_ZERO
        }

        val createOrganization = RightEntity.new {
            name = "CREATE_ORGANIZATION"
            description = "Create organization"
            createdBy = UUID_ZERO
        }

        val updateOrganization = RightEntity.new {
            name = "UPDATE_ORGANIZATION"
            description = "Create organization"
            createdBy = UUID_ZERO
        }

        val deleteOrganization = RightEntity.new {
            name = "DELETE_ORGANIZATION"
            description = "Delete organization"
            createdBy = UUID_ZERO
        }

        RightEntity.new {
            name = "MANAGE_USERS"
            description = "Manage Users"
            createdBy = UUID_ZERO
        }

        (developerRole of applicationContext).grant(
            // crud
            createOrganization, readOrganization, updateOrganization, deleteOrganization
        )

        UserRoleContext.insert {
            it[userId] = developer.id.value
            it[roleId] = developerRole.id.value
            it[contextId] = applicationContext.id
        }
        UserRoleContext.insert {
            it[userId] = unauthorizedUser.id.value
            it[roleId] = developerRole.id.value
            it[contextId] = applicationContext.id
        }



    }

    /**
     * Downwards migration (inverse to the upward migration).
     */
    override suspend fun Database.down() {
        TODO("Not yet implemented")
    }


}
