// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.application.data.userapplication

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens
import org.solyton.solawi.bid.module.application.data.application.Application

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class UserApplications(
    @ReadWrite val userId: String,
    @ReadWrite val applications: List<Application>
)

/**
 * Autogenerated Lens.
 * Read and manipulate [UserApplications.userId]
 */
@ReadWrite val userId: Lens<UserApplications, String> by lazy{ Lens(
    get = {whole -> whole.userId},
    set = {part -> {whole -> whole.copy(userId = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [UserApplications.userId]
 */
@ReadWrite fun UserApplications.userId(set: String.()->String ): UserApplications = copy(userId = set(userId)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [UserApplications.applications]
 */
@ReadWrite val applications: Lens<UserApplications, List<Application>> by lazy{ Lens(
    get = {whole -> whole.applications},
    set = {part -> {whole -> whole.copy(applications = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [UserApplications.applications]
 */
@ReadWrite fun UserApplications.applications(set: List<Application>.()->List<Application> ): UserApplications = copy(applications = set(applications)) 
