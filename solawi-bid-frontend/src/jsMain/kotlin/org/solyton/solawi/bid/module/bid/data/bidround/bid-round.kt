// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.bid.data.bidround

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens
import org.solyton.solawi.bid.module.bid.data.auction.Auction

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class BidRound(
    @ReadOnly val bidRoundId: String = "",
    @ReadWrite val showSuccessMessage: Boolean = false,
    @ReadWrite val round: Round,
    @ReadWrite val auction: Auction,
    @ReadWrite val bidAmount: Double?,
    @ReadWrite val numberOfShares: Int?,
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [BidRound.bidRoundId]
 */
@ReadOnly val bidRoundId: Lens<BidRound, String> by lazy{ Lens(
    get = {whole -> whole.bidRoundId},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [BidRound.showSuccessMessage]
 */
@ReadWrite val showSuccessMessage: Lens<BidRound, Boolean> by lazy{ Lens(
    get = {whole -> whole.showSuccessMessage},
    set = {part -> {whole -> whole.copy(showSuccessMessage = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidRound.showSuccessMessage]
 */
@ReadWrite fun BidRound.showSuccessMessage(set: Boolean.()->Boolean ): BidRound = copy(showSuccessMessage = set(showSuccessMessage)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [BidRound.round]
 */
@ReadWrite val round: Lens<BidRound, Round> by lazy{ Lens(
    get = {whole -> whole.round},
    set = {part -> {whole -> whole.copy(round = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidRound.round]
 */
@ReadWrite fun BidRound.round(set: Round.()-> Round): BidRound = copy(round = set(round))
/**
 * Autogenerated Lens.
 * Read and manipulate [BidRound.auction]
 */
@ReadWrite val auction: Lens<BidRound, Auction> by lazy{ Lens(
    get = {whole -> whole.auction},
    set = {part -> {whole -> whole.copy(auction = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidRound.auction]
 */
@ReadWrite fun BidRound.auction(set: Auction.()-> Auction): BidRound = copy(auction = set(auction))
/**
 * Autogenerated Lens.
 * Read and manipulate [BidRound.bidAmount]
 */
@ReadWrite val bidAmount: Lens<BidRound, Double?> by lazy{ Lens(
    get = {whole -> whole.bidAmount},
    set = {part -> {whole -> whole.copy(bidAmount = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidRound.bidAmount]
 */
@ReadWrite fun BidRound.bidAmount(set: Double?.()->Double? ): BidRound = copy(bidAmount = set(bidAmount)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [BidRound.numberOfShares]
 */
@ReadWrite val numberOfShares: Lens<BidRound, Int?> by lazy{ Lens(
    get = {whole -> whole.numberOfShares},
    set = {part -> {whole -> whole.copy(numberOfShares = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidRound.numberOfShares]
 */
@ReadWrite fun BidRound.numberOfShares(set: Int?.()->Int? ): BidRound = copy(numberOfShares = set(numberOfShares)) 
