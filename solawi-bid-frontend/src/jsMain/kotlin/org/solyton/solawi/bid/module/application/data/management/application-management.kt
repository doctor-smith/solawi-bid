// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.application.data.management

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.compose.modal.Modals
import org.evoleq.device.data.Device
import org.evoleq.optics.lens.Lens
import org.evoleq.optics.storage.ActionDispatcher
import org.solyton.solawi.bid.module.i18n.data.Environment
import org.solyton.solawi.bid.module.i18n.data.I18N
import org.solyton.solawi.bid.module.application.data.application.Application
import org.solyton.solawi.bid.module.application.data.userapplication.UserApplications

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class ApplicationManagement(
    @ReadOnly val actions: ActionDispatcher<ApplicationManagement> = ActionDispatcher {  },
    @ReadOnly val deviceData: Device = Device(),
    @ReadOnly val environment: Environment,
    @ReadWrite val modals: Modals<Int> = mapOf(),
    @ReadWrite val i18n: I18N = I18N(),
    @ReadWrite val availableApplications: List<Application> = listOf(),
    @ReadWrite val personalApplications: List<Application> = listOf(),
    @ReadWrite val userApplications: List<UserApplications> = listOf(),
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [ApplicationManagement.actions]
 */
@ReadOnly val actions: Lens<ApplicationManagement, ActionDispatcher<ApplicationManagement>> by lazy{ Lens(
    get = {whole -> whole.actions},
    set = {{it}}
) }
/**
 * Autogenerated ReadOnly Lens.
 * Read [ApplicationManagement.deviceData]
 */
@ReadOnly val deviceData: Lens<ApplicationManagement, Device> by lazy{ Lens(
    get = {whole -> whole.deviceData},
    set = {{it}}
) }
/**
 * Autogenerated ReadOnly Lens.
 * Read [ApplicationManagement.environment]
 */
@ReadOnly val environment: Lens<ApplicationManagement, Environment> by lazy{ Lens(
    get = {whole -> whole.environment},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [ApplicationManagement.modals]
 */
@ReadWrite val modals: Lens<ApplicationManagement, Modals<Int>> by lazy{ Lens(
    get = {whole -> whole.modals},
    set = {part -> {whole -> whole.copy(modals = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [ApplicationManagement.modals]
 */
@ReadWrite fun ApplicationManagement.modals(set: Modals<Int>.()->Modals<Int> ): ApplicationManagement = copy(modals = set(modals)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [ApplicationManagement.i18n]
 */
@ReadWrite val i18n: Lens<ApplicationManagement, I18N> by lazy{ Lens(
    get = {whole -> whole.i18n},
    set = {part -> {whole -> whole.copy(i18n = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [ApplicationManagement.i18n]
 */
@ReadWrite fun ApplicationManagement.i18n(set: I18N.()->I18N ): ApplicationManagement = copy(i18n = set(i18n)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [ApplicationManagement.availableApplications]
 */
@ReadWrite val availableApplications: Lens<ApplicationManagement, List<Application>> by lazy{ Lens(
    get = {whole -> whole.availableApplications},
    set = {part -> {whole -> whole.copy(availableApplications = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [ApplicationManagement.availableApplications]
 */
@ReadWrite fun ApplicationManagement.availableApplications(set: List<Application>.()->List<Application> ): ApplicationManagement = copy(availableApplications = set(availableApplications)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [ApplicationManagement.personalApplications]
 */
@ReadWrite val personalApplications: Lens<ApplicationManagement, List<Application>> by lazy{ Lens(
    get = {whole -> whole.personalApplications},
    set = {part -> {whole -> whole.copy(personalApplications = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [ApplicationManagement.personalApplications]
 */
@ReadWrite fun ApplicationManagement.personalApplications(set: List<Application>.()->List<Application> ): ApplicationManagement = copy(personalApplications = set(personalApplications)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [ApplicationManagement.userApplications]
 */
@ReadWrite val userApplications: Lens<ApplicationManagement, List<UserApplications>> by lazy{ Lens(
    get = {whole -> whole.userApplications},
    set = {part -> {whole -> whole.copy(userApplications = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [ApplicationManagement.userApplications]
 */
@ReadWrite fun ApplicationManagement.userApplications(set: List<UserApplications>.()->List<UserApplications> ): ApplicationManagement = copy(userApplications = set(userApplications)) 
