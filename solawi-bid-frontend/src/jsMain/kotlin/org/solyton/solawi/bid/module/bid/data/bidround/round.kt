// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.bid.data.bidround

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens
import org.solyton.solawi.bid.module.bid.data.evaluation.BidRoundEvaluation
import org.solyton.solawi.bid.module.bid.data.evaluation.BidRoundPreEvaluation

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Round(
    @ReadOnly val roundId: String,
    @ReadOnly val link: String,
    @ReadWrite val state: String,
    @ReadOnly val roundNumber: Int,
    @ReadWrite val comments: List<RoundComment> = listOf(),
    @ReadWrite val rawResults: BidRoundResults = BidRoundResults(),
    @ReadWrite val bidRoundEvaluation: BidRoundEvaluation = BidRoundEvaluation(),
    @ReadWrite val preEvaluation: BidRoundPreEvaluation = BidRoundPreEvaluation(),
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [Round.roundId]
 */
@ReadOnly val roundId: Lens<Round, String> by lazy{ Lens(
    get = {whole -> whole.roundId},
    set = {{it}}
) }
/**
 * Autogenerated ReadOnly Lens.
 * Read [Round.link]
 */
@ReadOnly val link: Lens<Round, String> by lazy{ Lens(
    get = {whole -> whole.link},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Round.state]
 */
@ReadWrite val state: Lens<Round, String> by lazy{ Lens(
    get = {whole -> whole.state},
    set = {part -> {whole -> whole.copy(state = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Round.state]
 */
@ReadWrite fun Round.state(set: String.()->String ): Round = copy(state = set(state)) 
/**
 * Autogenerated ReadOnly Lens.
 * Read [Round.roundNumber]
 */
@ReadOnly val roundNumber: Lens<Round, Int> by lazy{ Lens(
    get = {whole -> whole.roundNumber},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Round.comments]
 */
@ReadWrite val comments: Lens<Round, List<RoundComment>> by lazy{ Lens(
    get = {whole -> whole.comments},
    set = {part -> {whole -> whole.copy(comments = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Round.comments]
 */
@ReadWrite fun Round.comments(set: List<RoundComment>.()->List<RoundComment> ): Round = copy(comments = set(comments)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Round.rawResults]
 */
@ReadWrite val rawResults: Lens<Round, BidRoundResults> by lazy{ Lens(
    get = {whole -> whole.rawResults},
    set = {part -> {whole -> whole.copy(rawResults = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Round.rawResults]
 */
@ReadWrite fun Round.rawResults(set: BidRoundResults.()->BidRoundResults ): Round = copy(rawResults = set(rawResults)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Round.bidRoundEvaluation]
 */
@ReadWrite val bidRoundEvaluation: Lens<Round, BidRoundEvaluation> by lazy{ Lens(
    get = {whole -> whole.bidRoundEvaluation},
    set = {part -> {whole -> whole.copy(bidRoundEvaluation = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Round.bidRoundEvaluation]
 */
@ReadWrite fun Round.bidRoundEvaluation(set: BidRoundEvaluation.()->BidRoundEvaluation ): Round = copy(bidRoundEvaluation = set(bidRoundEvaluation))
/**
 * Autogenerated Lens.
 * Read and manipulate [Round.preEvaluation]
 */
@ReadWrite val preEvaluation: Lens<Round, BidRoundPreEvaluation> by lazy{ Lens(
    get = {whole -> whole.preEvaluation},
    set = {part -> {whole -> whole.copy(preEvaluation = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Round.preEvaluation]
 */
@ReadWrite fun Round.preEvaluation(set: BidRoundPreEvaluation.()->BidRoundPreEvaluation ): Round = copy(preEvaluation = set(preEvaluation))
