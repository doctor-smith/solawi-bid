// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.bid.data

import org.evoleq.compose.modal.Modals
import org.evoleq.device.data.Device
import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens
import org.evoleq.optics.storage.ActionDispatcher
import org.solyton.solawi.bid.module.bid.data.auction.Auction
import org.solyton.solawi.bid.module.bid.data.bidder.BidderMails
import org.solyton.solawi.bid.module.bid.data.bidenv.Environment
import org.solyton.solawi.bid.module.bid.data.bidround.BidRound
import org.solyton.solawi.bid.module.bid.data.biduser.User
import org.solyton.solawi.bid.module.i18n.data.I18N

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class BidApplication(
    @ReadOnly val environment: Environment,
    @ReadOnly val actions: ActionDispatcher<BidApplication>,
    @ReadWrite val modals: Modals<Int> = mapOf(),
    @ReadOnly val deviceData: Device = Device(),
    @ReadWrite val i18N: I18N = I18N(),
    @ReadWrite val user: User = User(),
    @ReadWrite val auctions: List<Auction> = listOf(),
    @ReadWrite val bidRounds: List<BidRound> = listOf(),
    @ReadWrite val bidderMailAddresses:  BidderMails = BidderMails(),
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [BidApplication.environment]
 */
@ReadOnly val environment: Lens<BidApplication, Environment> by lazy{ Lens(
    get = {whole -> whole.environment},
    set = {{it}}
) }
/**
 * Autogenerated ReadOnly Lens.
 * Read [BidApplication.actions]
 */
@ReadOnly val actions: Lens<BidApplication, ActionDispatcher<BidApplication>> by lazy{ Lens(
    get = {whole -> whole.actions},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [BidApplication.modals]
 */
@ReadWrite val modals: Lens<BidApplication, Modals<Int>> by lazy{ Lens(
    get = {whole -> whole.modals},
    set = {part -> {whole -> whole.copy(modals = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidApplication.modals]
 */
@ReadWrite fun BidApplication.modals(set: Modals<Int>.()->Modals<Int> ): BidApplication = copy(modals = set(modals)) 
/**
 * Autogenerated ReadOnly Lens.
 * Read [BidApplication.deviceData]
 */
@ReadOnly val deviceData: Lens<BidApplication, Device> by lazy{ Lens(
    get = {whole -> whole.deviceData},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [BidApplication.i18N]
 */
@ReadWrite val i18N: Lens<BidApplication, I18N> by lazy{ Lens(
    get = {whole -> whole.i18N},
    set = {part -> {whole -> whole.copy(i18N = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidApplication.i18N]
 */
@ReadWrite fun BidApplication.i18N(set: I18N.()->I18N ): BidApplication = copy(i18N = set(i18N)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [BidApplication.user]
 */
@ReadWrite val user: Lens<BidApplication, User> by lazy{ Lens(
    get = {whole -> whole.user},
    set = {part -> {whole -> whole.copy(user = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidApplication.user]
 */
@ReadWrite fun BidApplication.user(set: User.()->User ): BidApplication = copy(user = set(user)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [BidApplication.auctions]
 */
@ReadWrite val auctions: Lens<BidApplication, List<Auction>> by lazy{ Lens(
    get = {whole -> whole.auctions},
    set = {part -> {whole -> whole.copy(auctions = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidApplication.auctions]
 */
@ReadWrite fun BidApplication.auctions(set: List<Auction>.()->List<Auction> ): BidApplication = copy(auctions = set(auctions)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [BidApplication.bidRounds]
 */
@ReadWrite val bidRounds: Lens<BidApplication, List<BidRound>> by lazy{ Lens(
    get = {whole -> whole.bidRounds},
    set = {part -> {whole -> whole.copy(bidRounds = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidApplication.bidRounds]
 */
@ReadWrite fun BidApplication.bidRounds(set: List<BidRound>.()->List<BidRound> ): BidApplication = copy(bidRounds = set(bidRounds)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [BidApplication.bidderMailAddresses]
 */
@ReadWrite val bidderMailAddresses: Lens<BidApplication, BidderMails> by lazy{ Lens(
    get = {whole -> whole.bidderMailAddresses},
    set = {part -> {whole -> whole.copy(bidderMailAddresses = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [BidApplication.bidderMailAddresses]
 */
@ReadWrite fun BidApplication.bidderMailAddresses(set: BidderMails.()->BidderMails ): BidApplication = copy(bidderMailAddresses = set(bidderMailAddresses)) 
