// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.bid.data.auction

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class AuctionDetails(
    @ReadWrite val minimalBid: Double? = null,
    @ReadWrite val benchmark: Double? = null,
    @ReadWrite val targetAmount: Double? = null,
    @ReadWrite val solidarityContribution: Double? = null,
)

/**
 * Autogenerated Lens.
 * Read and manipulate [AuctionDetails.minimalBid]
 */
@ReadWrite val minimalBid: Lens<AuctionDetails, Double?> by lazy{ Lens(
    get = {whole -> whole.minimalBid},
    set = {part -> {whole -> whole.copy(minimalBid = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [AuctionDetails.minimalBid]
 */
@ReadWrite fun AuctionDetails.minimalBid(set: Double?.()->Double? ): AuctionDetails = copy(minimalBid = set(minimalBid)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [AuctionDetails.benchmark]
 */
@ReadWrite val benchmark: Lens<AuctionDetails, Double?> by lazy{ Lens(
    get = {whole -> whole.benchmark},
    set = {part -> {whole -> whole.copy(benchmark = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [AuctionDetails.benchmark]
 */
@ReadWrite fun AuctionDetails.benchmark(set: Double?.()->Double? ): AuctionDetails = copy(benchmark = set(benchmark)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [AuctionDetails.targetAmount]
 */
@ReadWrite val targetAmount: Lens<AuctionDetails, Double?> by lazy{ Lens(
    get = {whole -> whole.targetAmount},
    set = {part -> {whole -> whole.copy(targetAmount = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [AuctionDetails.targetAmount]
 */
@ReadWrite fun AuctionDetails.targetAmount(set: Double?.()->Double? ): AuctionDetails = copy(targetAmount = set(targetAmount)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [AuctionDetails.solidarityContribution]
 */
@ReadWrite val solidarityContribution: Lens<AuctionDetails, Double?> by lazy{ Lens(
    get = {whole -> whole.solidarityContribution},
    set = {part -> {whole -> whole.copy(solidarityContribution = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [AuctionDetails.solidarityContribution]
 */
@ReadWrite fun AuctionDetails.solidarityContribution(set: Double?.()->Double? ): AuctionDetails = copy(solidarityContribution = set(solidarityContribution)) 
