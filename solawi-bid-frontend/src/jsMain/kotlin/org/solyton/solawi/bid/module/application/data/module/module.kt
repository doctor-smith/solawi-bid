// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.application.data.module

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens
import org.solyton.solawi.bid.module.application.data.ApiLifecycleStage

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Module(
    @ReadOnly val id: String,
    @ReadWrite val name: String,
    @ReadWrite val state: ApiLifecycleStage
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [Module.id]
 */
@ReadOnly val id: Lens<Module, String> by lazy{ Lens(
    get = {whole -> whole.id},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Module.name]
 */
@ReadWrite val name: Lens<Module, String> by lazy{ Lens(
    get = {whole -> whole.name},
    set = {part -> {whole -> whole.copy(name = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Module.name]
 */
@ReadWrite fun Module.name(set: String.()->String ): Module = copy(name = set(name)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Module.state]
 */
@ReadWrite val state: Lens<Module, ApiLifecycleStage> by lazy{ Lens(
    get = {whole -> whole.state},
    set = {part -> {whole -> whole.copy(state = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Module.state]
 */
@ReadWrite fun Module.state(set: ApiLifecycleStage.()->ApiLifecycleStage ): Module = copy(state = set(state)) 
