// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.application.data.application

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens
import org.solyton.solawi.bid.module.application.data.LifecycleStage
import org.solyton.solawi.bid.module.application.data.module.Module

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Application(
    @ReadWrite val id: String,
    @ReadWrite val name: String,
    @ReadWrite val state: LifecycleStage,
    @ReadWrite val modules: List<Module> = listOf()
)

/**
 * Autogenerated Lens.
 * Read and manipulate [Application.id]
 */
@ReadWrite val id: Lens<Application, String> by lazy{ Lens(
    get = {whole -> whole.id},
    set = {part -> {whole -> whole.copy(id = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.id]
 */
@ReadWrite fun Application.id(set: String.()->String ): Application = copy(id = set(id)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.name]
 */
@ReadWrite val name: Lens<Application, String> by lazy{ Lens(
    get = {whole -> whole.name},
    set = {part -> {whole -> whole.copy(name = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.name]
 */
@ReadWrite fun Application.name(set: String.()->String ): Application = copy(name = set(name)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.state]
 */
@ReadWrite val state: Lens<Application, LifecycleStage> by lazy{ Lens(
    get = {whole -> whole.state},
    set = {part -> {whole -> whole.copy(state = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.state]
 */
@ReadWrite fun Application.state(set: LifecycleStage.()->LifecycleStage ): Application = copy(state = set(state)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Application.modules]
 */
@ReadWrite val modules: Lens<Application, List<Module>> by lazy{ Lens(
    get = {whole -> whole.modules},
    set = {part -> {whole -> whole.copy(modules = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Application.modules]
 */
@ReadWrite fun Application.modules(set: List<Module>.()->List<Module> ): Application = copy(modules = set(modules)) 
