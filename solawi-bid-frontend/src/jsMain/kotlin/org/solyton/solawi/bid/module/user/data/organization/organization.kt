// This file has been partially auto generated. 
// Please don't make any changes to the lenses.
// Feel free to add or remove annotated properties from
// the generator data class. The corresponding lenses 
// will be removed or added on the next run of the 
// lens generator. See below for more details.
package org.solyton.solawi.bid.module.user.data.organization

import org.evoleq.optics.Lensify
import org.evoleq.optics.ReadOnly
import org.evoleq.optics.ReadWrite
import org.evoleq.optics.lens.Lens
import org.solyton.solawi.bid.module.user.data.member.Member

/**
 * Generator class.
 * Feel free to add or remove annotated properties from
 * the class. Make sure that they are annotated with
 * - @ReadOnly
 * - @ReadWrite
 * If you want that a property-lens will be generated
 * on the next run of the lens generator.
 * If not, just omit the annotation or annotate it with @Ignore.
 */
@Lensify data class Organization(
    @ReadOnly val organizationId: String,
    @ReadWrite val name: String,
    @ReadOnly val contextId: String,
    @ReadWrite val subOrganizations: List<Organization> = listOf(),
    @ReadWrite val members: List<Member> = listOf()
)

/**
 * Autogenerated ReadOnly Lens.
 * Read [Organization.organizationId]
 */
@ReadOnly val organizationId: Lens<Organization, String> by lazy{ Lens(
    get = {whole -> whole.organizationId},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Organization.name]
 */
@ReadWrite val name: Lens<Organization, String> by lazy{ Lens(
    get = {whole -> whole.name},
    set = {part -> {whole -> whole.copy(name = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Organization.name]
 */
@ReadWrite fun Organization.name(set: String.()->String ): Organization = copy(name = set(name)) 
/**
 * Autogenerated ReadOnly Lens.
 * Read [Organization.contextId]
 */
@ReadOnly val contextId: Lens<Organization, String> by lazy{ Lens(
    get = {whole -> whole.contextId},
    set = {{it}}
) }
/**
 * Autogenerated Lens.
 * Read and manipulate [Organization.subOrganizations]
 */
@ReadWrite val subOrganizations: Lens<Organization, List<Organization>> by lazy{ Lens(
    get = {whole -> whole.subOrganizations},
    set = {part -> {whole -> whole.copy(subOrganizations = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Organization.subOrganizations]
 */
@ReadWrite fun Organization.subOrganizations(set: List<Organization>.()->List<Organization> ): Organization = copy(subOrganizations = set(subOrganizations)) 
/**
 * Autogenerated Lens.
 * Read and manipulate [Organization.members]
 */
@ReadWrite val members: Lens<Organization, List<Member>> by lazy{ Lens(
    get = {whole -> whole.members},
    set = {part -> {whole -> whole.copy(members = part)}}
) }
/**
 * Autogenerated Setter of a Pseudo Lens
 * Manipulate [Organization.members]
 */
@ReadWrite fun Organization.members(set: List<Member>.()->List<Member> ): Organization = copy(members = set(members)) 
