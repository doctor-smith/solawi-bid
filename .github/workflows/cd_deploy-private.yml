name: CD Pipeline
on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - main
    paths-ignore:
      - '.github/**'
concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write  # Required to create a release

jobs:
  validation:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - run: echo "todo"
  clone-database:
    needs: validation
    runs-on: solyton
    steps:
      - name: Dump db
        run: |
          rm -f ${{vars.DATABASE_DUMP}}
          docker exec solawi-bid_database mysqldump -u${{vars.DATABASE_USER}} -p'${{secrets.MYSQL_PASSWORD}}' ${{vars.MYSQL_DATABASE}} > ${{vars.DATABASE_DUMP }}
  build:
    needs: validation
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set env variables database
        uses: ./.github/actions/set-env-vars-database
        with:
          environment: prod
          mysqlDatabase: ${{vars.MYSQL_DATABASE}}
          mysqlUser: ${{vars.MYSQL_USER}}
          mysqlPassword: ${{secrets.MYSQL_PASSWORD}}
          mysqlRootPassword: ${{secrets.MYSQL_ROOT_PASSWORD}}

      - name: Set env variables frontend
        uses: ./.github/actions/set-env-vars-frontend
        with:
          environment: prod #${{ vars.ENVIRONMENT }}
          frontendUrl: https://solyton.org
          frontendPort: 443 # 80
          backendUrl: https://bid.solyton.org
          backendPort: 443 # 8080

      - name: Setup JDK, Gradle and Caches
        uses: ./.github/actions/setup

      - name: Build
        run: ./gradlew build -x test

     # - name: Run Backend tests
     #   uses: ./.github/actions/test-backend

     # - name: Run Frontend tests
     #   uses: ./.github/actions/test-frontend

      - name: Set env variables backend
        uses: ./.github/actions/set-env-vars-backend
        with:
          environment: prod
          ktorPort: ${{ vars.KTOR_PORT }}
          appOwnerUsername: ${{ secrets.APPLICATION_OWNER_USERNAME }}
          appOwnerPassword: ${{ secrets.APPLICATION_OWNER_PASSWORD }}

          jwtSecret: ${{ secrets.JWT_SECRET }}
          jwtRealm: ${{ vars.JWT_REALM }}
          jwtDomain: ${{ vars.JWT_DOMAIN }}
          jwtAudience: ${{ vars.JWT_AUDIENCE }}

          databaseDriver: ${{ vars.DATABASE_DRIVER }}
          databaseUser: ${{ vars.DATABASE_USER }}
          databasePassword: ${{ secrets.DATABASE_PASSWORD }}
          databaseUrl: ${{ vars.DATABASE_URL }}

      - name: Collect
        uses: ./.github/actions/collect-artifacts
        with:
          baseFolder: deploy

      - uses: actions/upload-artifact@v4
        with:
          name: deploy
          path: deploy/**/*

  deploy-application:
    needs: build
    runs-on: jupiter
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: deploy
          path: deploy/
      - name: Rsync
        run: |
          mv deploy/solawi-bid-frontend/e.env deploy/solawi-bid-frontend/.env
          mv deploy/solawi-bid-database/e.env deploy/solawi-bid-database/.env
          
          rsync -avr -e 'ssh -p ${{ secrets.SOLYTON_SSH_PORT }}' --delete deploy/ ${{ vars.SOLYTON }}
      - name: Cleanup
        if: always()
        run: |
          rm -rf deploy/

  restart:
     needs:
        - deploy-application
        - clone-database
     runs-on: solyton
     steps:
      - name: Get db-clone
        run: |
          mkdir -p /home/solawi-bid/solawi-bid-database/sql
          cp ${{vars.DATABASE_DUMP}} /home/solawi-bid/solawi-bid-database/sql/setup.sql
          rm ${{vars.DATABASE_DUMP}}
      - name: Restart application
        run: |
          cd /home/solawi-bid
          docker-compose down --remove-orphans  # Stop running containers
          docker-compose up --build -d  # Rebuild and restart containers
          docker system prune -f  # Cleanup unused Docker images

  create-release:
    needs:
      - restart
    uses: ./.github/workflows/create-release.yml