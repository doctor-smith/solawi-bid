name: Continuous Integration
run-name: ${{ startsWith(github.ref, 'refs/tags/') && 'Main → Prod' || (github.ref == 'refs/heads/main' && 'Main → Staging' || 'Feature → Dev') }} (${{ github.event.head_commit.message }})

on:
  push:

permissions:
  contents: read
  packages: write
  id-token: write
  checks: write

concurrency:
  group: ci-${{ startsWith(github.ref, 'refs/tags/') && 'P' || (github.ref == 'refs/heads/main' && 'Q' || 'D') }}
  cancel-in-progress: false


jobs:
  build-Frontend:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    outputs:
      full_image_name: ${{ steps.build-frontend.outputs.full_image_name }}
      full_image_reference: ${{ steps.build-frontend.outputs.full_image_refrence }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Build Frontend Docker Image
        id: build-frontend
        uses: ./.github/actions/build-docker
        with:
          image_name: frontend
          dockerfile_path: infrastructure/docker/Dockerfile-Frontend

  build-Backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    outputs:
      full_image_name: ${{ steps.build-backend.outputs.full_image_name }}
      full_image_reference: ${{ steps.build-backend.outputs.full_image_refrence }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Build Backend Docker Image
        id: build-backend
        uses: ./.github/actions/build-docker
        with:
          image_name: backend
          dockerfile_path: infrastructure/docker/Dockerfile-Backend

  e2e:
    env:
      TEST_USER: ${{ vars.test_user }}
      TEST_USER_PASSWORD: ${{ secrets.test_user_password }}
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: [ build-Frontend, build-Backend ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            .playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/gradle.lockfile') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Download Frontend Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-frontend

      - name: Download Backend Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-backend

      - name: Load Docker Images
        run: |
          docker load --input docker_image_frontend.tar
          docker load --input docker_image_backend.tar

      - name: Start E2E Test Environment
        run: docker compose -f docker-compose.e2e.yml up -d --wait --quiet-pull

      - name: Give gradlew permissions
        run: chmod +x ./gradlew

      - name: Install Playwright Browsers
        run: ./gradlew :e2e:installPlaywright

      - name: Run Playwright E2E tests
        run: ./gradlew :e2e:test --info



  push-Frontend:
    name: Push Frontend Docker Image
    runs-on: ubuntu-latest
    needs: [e2e, build-Frontend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Push Docker Image
        uses: ./.github/actions/push-docker
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: frontend
          full_image_name: ${{ needs.build-Frontend.outputs.full_image_name }}

  push-Backend:
    name: Push Backend Docker Image
    runs-on: ubuntu-latest
    needs: [e2e, build-Backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: push-docker
        uses: ./.github/actions/push-docker
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image_name: backend
          full_image_name: ${{ needs.build-Backend.outputs.full_image_name }}

  deploy:
    environment: ${{ startsWith(github.ref, 'refs/tags/') && 'Production' || (github.ref == 'refs/heads/main' && 'Staging' || 'Develop') }}
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [push-Frontend, push-Backend, build-Frontend, build-Backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: collect environment config
        id: collect-env-config
        run: |
          if [[ "${{github.ref}}" == *"refs/tags/"* ]]; then
            echo 'environment=P' >> $GITHUB_OUTPUT
            echo 'frontend_domain=solyton.org' >> $GITHUB_OUTPUT
            echo 'backend_domain=api.solyton.org' >> $GITHUB_OUTPUT
            echo 'mysql_password=${{ secrets.MYSQL_PASSWORD_P }}' >> $GITHUB_OUTPUT
            echo 'jwt_secret=${{ secrets.JWT_SECRET_P }}' >> $GITHUB_OUTPUT
            echo 'application_owner_password=${{ secrets.APPLICATION_OWNER_PASSWORD_P }}' >> $GITHUB_OUTPUT
          elif [[  "${{github.ref}}" == *"refs/heads/main"* ]]; then
            echo 'environment=Q' >> $GITHUB_OUTPUT
            echo 'frontend_domain=q.solyton.org' >> $GITHUB_OUTPUT
            echo 'backend_domain=api.q.solyton.org' >> $GITHUB_OUTPUT
            echo 'mysql_password=${{ secrets.MYSQL_PASSWORD_Q }}' >> $GITHUB_OUTPUT
            echo 'jwt_secret=${{ secrets.JWT_SECRET_Q }}' >> $GITHUB_OUTPUT
            echo 'application_owner_password=${{ secrets.APPLICATION_OWNER_PASSWORD_Q }}' >> $GITHUB_OUTPUT
          else
            echo 'environment=D' >> $GITHUB_OUTPUT
            echo 'frontend_domain=d.solyton.org' >> $GITHUB_OUTPUT
            echo 'backend_domain=api.d.solyton.org' >> $GITHUB_OUTPUT
            echo 'mysql_password=${{ secrets.MYSQL_PASSWORD_D }}' >> $GITHUB_OUTPUT
            echo 'jwt_secret=${{ secrets.JWT_SECRET_D }}' >> $GITHUB_OUTPUT
            echo 'application_owner_password=${{ secrets.APPLICATION_OWNER_PASSWORD_D }}' >> $GITHUB_OUTPUT
          fi
      - name: Deploy Application
        uses: ./.github/actions/deploy-application
        with:
          environment: ${{ steps.collect-env-config.outputs.environment }}
          mysql_password: ${{ steps.collect-env-config.outputs.mysql_password }}
          frontend_domain: ${{ steps.collect-env-config.outputs.frontend_domain }}
          backend_domain: ${{ steps.collect-env-config.outputs.backend_domain }}
          jwt_secret: ${{ steps.collect-env-config.outputs.jwt_secret }}
          application_owner_password: ${{ steps.collect-env-config.outputs.application_owner_password }}
          backend_image_name: ${{ needs.build-Backend.outputs.full_image_reference }}
          frontend_image_name: ${{ needs.build-Frontend.outputs.full_image_reference }}
          application_owner_username: 'owner@solyton.org'
          server_address: '${{ vars.SERVER_ADDRESS }}'
          server_user: ${{ vars.SERVER_USER }}
          server_key: ${{ secrets.SERVER_KEY }}
          smtp_password: ${{ secrets.SMTP_PASSWORD }}
