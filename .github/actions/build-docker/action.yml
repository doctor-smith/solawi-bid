name: build-and-push-docker
description: Build Docker images

inputs:
  registry:
    description: 'Container registry URL'
    required: true
    default: 'ghcr.io'
  image_name:
    description: 'Image name'
    required: true
  dockerfile_path:
    description: 'Path to the Dockerfile'
    required: true

outputs:
  full_image_name:
    description: "Full name of the Docker image"
    value: ${{ steps.full_image_name.outputs.full_image_name }}
  full_image_refrence:
    description: "Full reference of the Docker image including tags"
    value: ${{ steps.full_image_name.outputs.full_image_refrence }}

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      id: setup-buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata (tags, labels) for Docker image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ inputs.REGISTRY }}/${{ github.repository }}/${{ inputs.image_name }}
        tags: |
          type=ref,event=branch,prefix=branch-
          type=ref,event=tag,prefix=tag-
          type=sha
        flavor: latest=true

    - name: Generate full image name
      id: full_image_name
      shell: bash
      run: |
        echo "full_image_name=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1 | cut -d ':' -f 1)" >> $GITHUB_OUTPUT
        echo "full_image_refrence=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)" >> $GITHUB_OUTPUT

    # 🧪 Build the builder stage with BuildKit + cache
    - name: Build builder image (with cache)
      id: builder-build
      uses: docker/build-push-action@v6
      with:
        file: ${{ inputs.dockerfile_path }}
        target: build
        tags: builder-image
        outputs: type=docker,dest=builder_image_${{ inputs.image_name }}.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Load the builder image and extract test results
    - name: Load builder image
      shell: bash
      run: |
        docker load -i builder_image_${{ inputs.image_name }}.tar

    - name: Extract test results
      shell: bash
      run: |
        container_id=$(docker create builder-image)
        mkdir -p ./test-results
        docker cp "$container_id:/test-results" ./test-results || echo "No test results found"
        docker rm "$container_id"

    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ inputs.image_name }}
        path: ./test-results
        retention-days: 5

    # Use Dorny test-reporter to show test failures in the UI
    - name: Publish Test Report
      uses: dorny/test-reporter@v2
      with:
        name: test-report-${{ inputs.image_name }}
        report-title: Test Report ${{ endswith(inputs.image_name, 'frontend') && 'Frontend' || 'Backend'  }}
        path: ./test-results/**/*.xml
        reporter: java-junit
        fail-on-error: false
        fail-on-empty: false

    # 🏗️ Build final production image (with same cache)
    - name: Build Docker image (production)
      id: push
      uses: docker/build-push-action@v6
      with:
        file: ${{ inputs.dockerfile_path }}
        target: production
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=docker,dest=docker_image_${{ inputs.image_name }}.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload Docker Image Artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ inputs.image_name }}
        path: docker_image_${{ inputs.image_name }}.tar
        retention-days: 1
